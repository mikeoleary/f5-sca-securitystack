{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Conditions": {
     "noCustomImageId": {
      "Fn::Equals": [
       "OPTIONAL",
       {
        "Ref": "customImageId"
       }
      ]
     },
     "optin": {
      "Fn::Equals": [
       "Yes",
       {
        "Ref": "allowUsageAnalytics"
       }
      ]
     },
     "Tier1": {
        "Fn::Equals" : [{"Ref" : "pTier"}, "Tier1"]
     },
     "Tier2": {
        "Fn::Equals" : [{"Ref" : "pTier"}, "Tier2"]
    },
    "SCCA": {
       "Fn::Equals" : [{"Ref" : "pBaselineCompliance"}, "SCCA"]
     }
    },
    "Description": "Template v4.2.0: AWS CloudFormation Template for creating a Same-AZ cluster of 3NIC BIG-IPs in an existing VPC **WARNING** This template creates Amazon EC2 Instances. You will be billed for the AWS resources used if you create a stack from this template.",
    "Mappings": {
     "BigipRegionMap": {
      "ap-northeast-1": {
       "AllOneBootLocation": "ami-0240c8e96f2741435",
       "AllTwoBootLocations": "ami-037c2b717026e7ecb",
       "LTMOneBootLocation": "ami-04ba43b3f4b5e90c9",
       "LTMTwoBootLocations": "ami-0c9f2a07911a56985"
      },
      "ap-northeast-2": {
       "AllOneBootLocation": "ami-02223f6a5ba473fba",
       "AllTwoBootLocations": "ami-0c1f5dcc94be71977",
       "LTMOneBootLocation": "ami-091c7809b799704b0",
       "LTMTwoBootLocations": "ami-04f93cfb72179789e"
      },
      "ap-south-1": {
       "AllOneBootLocation": "ami-081557fb2d4d321fc",
       "AllTwoBootLocations": "ami-077e99fe8e0ba3525",
       "LTMOneBootLocation": "ami-005581e0d7583f34f",
       "LTMTwoBootLocations": "ami-02b6a04b4f82000f7"
      },
      "ap-southeast-1": {
       "AllOneBootLocation": "ami-025db728f6c6f94f2",
       "AllTwoBootLocations": "ami-0f428af3cdf935ce1",
       "LTMOneBootLocation": "ami-0ebc0953faddec26a",
       "LTMTwoBootLocations": "ami-07385887934294d4c"
      },
      "ap-southeast-2": {
       "AllOneBootLocation": "ami-0d005254ce3720769",
       "AllTwoBootLocations": "ami-0e4e81d6f1183c257",
       "LTMOneBootLocation": "ami-02b3714db16334177",
       "LTMTwoBootLocations": "ami-0b8255867efcae791"
      },
      "ca-central-1": {
       "AllOneBootLocation": "ami-0275890e371b80499",
       "AllTwoBootLocations": "ami-05135bec8d058254a",
       "LTMOneBootLocation": "ami-093e26b37fe2e4d03",
       "LTMTwoBootLocations": "ami-058e7f609fb2e33c7"
      },
      "eu-central-1": {
       "AllOneBootLocation": "ami-013b27068af5f22c0",
       "AllTwoBootLocations": "ami-067c733a892e13160",
       "LTMOneBootLocation": "ami-0b58a085dab6cdb99",
       "LTMTwoBootLocations": "ami-0c1e18896ebd64ba6"
      },
      "eu-north-1": {
       "AllOneBootLocation": "ami-96d058e8",
       "LTMOneBootLocation": "ami-6bdd5515"
      },
      "eu-west-1": {
       "AllOneBootLocation": "ami-046b187c6baf43c20",
       "AllTwoBootLocations": "ami-0e0c107da603ddf18",
       "LTMOneBootLocation": "ami-01241ee40daceb616",
       "LTMTwoBootLocations": "ami-05598853db5d48d92"
      },
      "eu-west-2": {
       "AllOneBootLocation": "ami-02d808d3482d9a1e8",
       "AllTwoBootLocations": "ami-09fe75a1bed71d23c",
       "LTMOneBootLocation": "ami-0d3829fe7d174a365",
       "LTMTwoBootLocations": "ami-0cc47784e299bf884"
      },
      "eu-west-3": {
       "AllOneBootLocation": "ami-0467278dd6414c990",
       "AllTwoBootLocations": "ami-05a7b08b7b4b231e7",
       "LTMOneBootLocation": "ami-033f52c588feece31",
       "LTMTwoBootLocations": "ami-0561d737a8e01844e"
      },
      "sa-east-1": {
       "AllOneBootLocation": "ami-08b069876cb181967",
       "AllTwoBootLocations": "ami-08f9d5a49c0204d3f",
       "LTMOneBootLocation": "ami-08d7a850beafb94fd",
       "LTMTwoBootLocations": "ami-07cc6c77074e821fd"
      },
      "us-east-1": {
       "AllOneBootLocation": "ami-04d6271456d114d6e",
       "AllTwoBootLocations": "ami-09535610be1e46f85",
       "LTMOneBootLocation": "ami-0454acee4fec96954",
       "LTMTwoBootLocations": "ami-08caaa915ea1588bc"
      },
      "us-east-2": {
       "AllOneBootLocation": "ami-00faf46f34dbdfcf7",
       "AllTwoBootLocations": "ami-015f20c96a64477f5",
       "LTMOneBootLocation": "ami-083c5fc641688f044",
       "LTMTwoBootLocations": "ami-007cd0874bcf23bf2"
      },
      "us-gov-west-1": {
       "AllOneBootLocation": "ami-fe75039f",
       "AllTwoBootLocations": "ami-fa71079b",
       "LTMOneBootLocation": "ami-ac2a5ccd",
       "LTMTwoBootLocations": "ami-fb0e789a"
      },
      "us-west-1": {
       "AllOneBootLocation": "ami-0ad2b6438f66e01e1",
       "AllTwoBootLocations": "ami-05b0de156bf3306b2",
       "LTMOneBootLocation": "ami-053c9eb0db0eacbc7",
       "LTMTwoBootLocations": "ami-0a81b20435995531c"
      },
      "us-west-2": {
       "AllOneBootLocation": "ami-0b965f92297425381",
       "AllTwoBootLocations": "ami-051ad1ae8e246c7c6",
       "LTMOneBootLocation": "ami-0345ef577e671f8fe",
       "LTMTwoBootLocations": "ami-0aadab9a7650af6ca"
      }
     }
    },
    "Metadata": {
     "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
       {
        "Label": {
         "default": "NETWORKING CONFIGURATION"
        },
        "Parameters": [
         "pVpcStackName",
         "pTier",
         "numberOfAdditionalNics",
         "additionalNicLocation"
        ]
       },
       {
        "Label": {
         "default": "INSTANCE CONFIGURATION"
        },
        "Parameters": [
         "pBaselineCompliance",
         "imageName",
         "customImageId",
         "instanceType",
         "applicationInstanceType",
         "licenseKey1",
         "licenseKey2",
         "managementGuiPort",
         "sshKey",
         "restrictedSrcAddress",
         "restrictedSrcAddressApp",
         "ntpServer",
         "timezone"
        ]
       },
       {
        "Label": {
         "default": "TAGS"
        },
        "Parameters": [
         "application",
         "environment",
         "group",
         "owner",
         "costcenter"
        ]
       },
       {},
       {
        "Label": {
         "default": "TEMPLATE ANALYTICS"
        },
        "Parameters": [
         "allowUsageAnalytics"
        ]
       },
       {
        "Label": {
         "default": "VIRTUAL SERVICE CONFIGURATION"
        },
        "Parameters": [
         "declarationUrl",
         "declarationUrlrouting"
        ]
       }
      ],
      "ParameterLabels": {
       "pVpcStackName": {
        "default": "Name of the Stack that deployed the VPC"
        },
       "pTier": {
        "default": "Tier1 or Tier2. Defines which Tier of the architecture the BIG-IP devices will sit in."
        },
       "pBaselineCompliance": {
        "default": "Choose your baseline compliance posture"
       },
       "additionalNicLocation": {
        "default": "Additional NIC Location"
       },
       "allowUsageAnalytics": {
        "default": "Send Anonymous Statistics to F5"
       },
       "application": {
        "default": "Application"
       },
       "applicationInstanceType": {
        "default": "Application Instance Type"
       },
       "costcenter": {
        "default": "Cost Center"
       },
       "customImageId": {
        "default": "Custom Image Id"
       },

       "environment": {
        "default": "Environment"
       },
       "group": {
        "default": "Group"
       },
       "imageName": {
        "default": "BIG-IP Image Name"
       },
       "instanceType": {
        "default": "AWS Instance Size"
       },
       "licenseKey1": {
        "default": "License Key 1"
       },
       "licenseKey2": {
        "default": "License Key 2"
       },
       "managementGuiPort": {
        "default": "BIG-IP Management Port"
       },
       "ntpServer": {
        "default": "NTP Server"
       },
       "numberOfAdditionalNics": {
        "default": "Number Of Additional NICs"
       },
       "owner": {
        "default": "Owner"
       },
       "restrictedSrcAddress": {
        "default": "Source Address(es) for Management Access"
       },
       "restrictedSrcAddressApp": {
        "default": "Source Address(es) for Web Application Access (80/443)"
       },
       "sshKey": {
        "default": "SSH Key"
       },
       "timezone": {
        "default": "Timezone (Olson)"
       }
      }
     },
     "Version": "4.2.0"
    },
    "Outputs": {
     "StackName": {
      "Value": {
       "Ref": "AWS::StackName"
      }
     },
     "S3BucketName": {
        "Value": {
         "Ref": "S3Bucket"
        },
        "Export" : {
          "Name" : {"Fn::Sub": "${AWS::StackName}-S3BucketName" }
        }
       },
     "Bigip1ExternalInterfacePrivateIp": {
      "Description": "Internally routable IP of the public interface on BIG-IP",
      "Value": {
       "Fn::GetAtt": [
        "Bigip1subnet1Az1Interface",
        "PrimaryPrivateIpAddress"
       ]
      }
     },
     "Bigip1InstanceId": {
      "Description": "Instance Id of BIG-IP in Amazon",
      "Value": {
       "Ref": "Bigip1Instance"
      }
     },
     "Bigip1InternalInterface": {
      "Description": "Internal interface ID on BIG-IP",
      "Value": {
       "Ref": "Bigip1InternalInterface"
      },
      "Export" : {
        "Name" : {"Fn::Sub": "${AWS::StackName}-Bigip1InternalInterface" }
      }
     },
     "Bigip1InternalInterfacePrivateIp": {
      "Description": "Internally routable IP of internal interface on BIG-IP",
      "Value": {
       "Fn::GetAtt": [
        "Bigip1InternalInterface",
        "PrimaryPrivateIpAddress"
       ]
      }
     },
     "Bigip1ManagementEipAddress": {
      "Description": "IP address of the management port on BIG-IP",
      "Value": {
       "Ref": "Bigip1ManagementEipAddress"
      },
      "Export" : {
        "Name" : {"Fn::Sub": "${AWS::StackName}-Bigip1ManagementEipAddress" }
      }
     },
     "Bigip1ManagementInterface": {
      "Description": "Management interface ID on BIG-IP",
      "Value": {
       "Ref": "Bigip1ManagementInterface"
      }
     },
     "Bigip1ManagementInterfacePrivateIp": {
      "Description": "Internally routable IP of the management interface on BIG-IP",
      "Value": {
       "Fn::GetAtt": [
        "Bigip1ManagementInterface",
        "PrimaryPrivateIpAddress"
       ]
      }
     },
     "Bigip1Url": {
      "Description": "BIG-IP Management GUI",
      "Value": {
       "Fn::Join": [
        "",
        [
         "https://",
         {
          "Fn::GetAtt": [
           "Bigip1Instance",
           "PublicIp"
          ]
         }
        ]
       ]
      }
     },
     "Bigip1VipEipAddress": {
      "Description": "EIP address for VIP",
      "Value": {
       "Fn::Join": [
        "",
        [
         "http://",
         {
          "Ref": "Bigip1VipEipAddress"
         },
         ":80"
        ]
       ]
      }
     },
     "Bigip1VipPrivateIp": {
      "Description": "VIP on External Interface Secondary IP 1",
      "Value": {
       "Fn::Select": [
        "0",
        {
         "Fn::GetAtt": [
          "Bigip1subnet1Az1Interface",
          "SecondaryPrivateIpAddresses"
         ]
        }
       ]
      }
     },
     "Bigip1subnet1Az1Interface": {
      "Description": "External interface Id on BIG-IP",
      "Value": {
       "Ref": "Bigip1subnet1Az1Interface"
      },
      "Export" : {
        "Name" : {"Fn::Sub": "${AWS::StackName}-Bigip1ExternalInterface" }
      }
     },
     "Bigip1subnet1Az1SelfEipAddress": {
      "Description": "IP Address of the External interface attached to BIG-IP",
      "Value": {
       "Ref": "Bigip1subnet1Az1SelfEipAddress"
      }
     },
     "Bigip2ExternalInterfacePrivateIp": {
      "Description": "Internally routable IP of the public interface on BIG-IP",
      "Value": {
       "Fn::GetAtt": [
        "Bigip2subnet1Az1Interface",
        "PrimaryPrivateIpAddress"
       ]
      }
     },
     "Bigip2InstanceId": {
      "Description": "Instance Id of BIG-IP in Amazon",
      "Value": {
       "Ref": "Bigip2Instance"
      }
     },
     "Bigip2InternalInterface": {
      "Description": "Internal interface ID on BIG-IP",
      "Value": {
       "Ref": "Bigip2InternalInterface"
      },
      "Export" : {
        "Name" : {"Fn::Sub": "${AWS::StackName}-Bigip2InternalInterface" }
      }
     },
     "Bigip2InternalInterfacePrivateIp": {
      "Description": "Internally routable IP of internal interface on BIG-IP",
      "Value": {
       "Fn::GetAtt": [
        "Bigip2InternalInterface",
        "PrimaryPrivateIpAddress"
       ]
      }
     },
     "Bigip2ManagementEipAddress": {
      "Description": "IP address of the management port on BIG-IP",
      "Value": {
       "Ref": "Bigip2ManagementEipAddress"
      },
      "Export" : {
        "Name" : {"Fn::Sub": "${AWS::StackName}-Bigip2ManagementEipAddress" }
      }
     },
     "Bigip2ManagementInterface": {
      "Description": "Management interface ID on BIG-IP",
      "Value": {
       "Ref": "Bigip2ManagementInterface"
      }
     },
     "Bigip2ManagementInterfacePrivateIp": {
      "Description": "Internally routable IP of the management interface on BIG-IP",
      "Value": {
       "Fn::GetAtt": [
        "Bigip2ManagementInterface",
        "PrimaryPrivateIpAddress"
       ]
      }
     },
     "Bigip2Url": {
      "Description": "BIG-IP Management GUI",
      "Value": {
       "Fn::Join": [
        "",
        [
         "https://",
         {
          "Fn::GetAtt": [
           "Bigip2Instance",
           "PublicIp"
          ]
         }
        ]
       ]
      }
     },
     "Bigip2subnet1Az1Interface": {
      "Description": "External interface Id on BIG-IP",
      "Value": {
       "Ref": "Bigip2subnet1Az1Interface"
      },
      "Export" : {
       "Name" : {"Fn::Sub": "${AWS::StackName}-Bigip2ExternalInterface" }
      }
     },
     "Bigip2subnet1Az1SelfEipAddress": {
      "Description": "IP Address of the External interface attached to BIG-IP",
      "Value": {
       "Ref": "Bigip2subnet1Az1SelfEipAddress"
      }
     },
     "availabilityZone1": {
      "Description": "Availability Zone",
      "Value": {
       "Fn::GetAtt": [
        "Bigip1Instance",
        "AvailabilityZone"
       ]
      }
     },
     "availabilityZone2": {
      "Description": "Availability Zone",
      "Value": {
       "Fn::GetAtt": [
        "Bigip2Instance",
        "AvailabilityZone"
       ]
      }
     },
     "bigipExternalSecurityGroup": {
      "Description": "Public or External Security Group",
      "Value": {
       "Ref": "bigipExternalSecurityGroup"
      }
     },
     "bigipInternalSecurityGroup": {
      "Description": "Private or Internal Security Group",
      "Value": {
       "Ref": "bigipInternalSecurityGroup"
      }
     },
     "bigipManagementSecurityGroup": {
      "Description": "Management Security Group",
      "Value": {
       "Ref": "bigipManagementSecurityGroup"
      }
     }
    },
    "Parameters": {
     "pVpcStackName": {
      "ConstraintDescription": "VPC Stack Name with output of VpcId.",
      "Type": "String",
      "Default": "VDSS"
      },
       "pVirtualPrivateIP": {
           "ConstraintDescription": "Tier3 Virtual address",
           "Type": "String",
           "Default": "10.0.4.11"
       },
       "pTier": {
        "AllowedValues": [
            "Tier1",
            "Tier2"
           ],
        "ConstraintDescription": "Must be Tier1 or Tier2.",
        "Type": "String",
        "Default": "Tier1"
       },
     "pBaselineCompliance": {
      "AllowedValues" : ["Enterprise", "SCCA"],
      "ConstraintDescription": "Choose your baseline compliance posture",
      "Description": "Choose your baseline compliance posture",
      "MaxLength": "255",
      "MinLength": "1",
      "Type": "String"
       },
     "allowUsageAnalytics": {
      "AllowedValues": [
       "Yes",
       "No"
      ],
      "Default": "Yes",
      "Description": "This deployment can send anonymous statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent.",
      "Type": "String"
     },
     "application": {
      "Default": "f5app",
      "Description": "Name of the Application Tag",
      "Type": "String"
     },
     "costcenter": {
      "Default": "f5costcenter",
      "Description": "Name of the Cost Center Tag",
      "Type": "String"
     },
     "customImageId": {
      "ConstraintDescription": "Must be a valid AMI Id",
      "Default": "OPTIONAL",
      "Description": "If you would like to deploy using a custom BIG-IP image, provide the AMI Id.  **Note**: Unless specifically required, leave the default of **OPTIONAL**",
      "MaxLength": 255,
      "MinLength": 1,
      "Type": "String"
     },
     "declarationUrl": {
      "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
      "Default": "none",
      "Description": "URL for the AS3 declaration JSON file to be deployed. Leave as **none** to deploy without a service configuration.",
      "Type": "String"
     },
     "declarationUrlrouting": {
      "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
      "Default": "none",
      "Description": "URL for the AS3 declaration JSON file to be deployed. Leave as **none** to deploy without a service configuration.",
      "Type": "String"
     },
     "environment": {
      "Default": "f5env",
      "Description": "Name of the Environment Tag",
      "Type": "String"
     },
     "group": {
      "Default": "f5group",
      "Description": "Name of the Group Tag",
      "Type": "String"
     },
     "imageName": {
      "AllowedValues": [
       "AllTwoBootLocations",
       "LTMTwoBootLocations"
      ],
      "ConstraintDescription": "Must be a valid F5 BIG-IP VE image type",
      "Default": "AllTwoBootLocations",
      "Description": "Image names starting with All have all BIG-IP modules available. Image names starting with LTM have only the LTM module available.  Use Two Boot Locations if you expect to upgrade the BIG-IP VE in the future (the Two Boot Location options are only applicable to BIG-IP v13.1.1 or later).",
      "Type": "String"
     },
     "instanceType": {
      "AllowedValues": [
       "m5.xlarge",
       "m5.2xlarge",
       "m5.4xlarge",
       "m5.large",
       "m5.12xlarge",
       "m4.xlarge",
       "m4.large",
       "m4.4xlarge",
       "m4.2xlarge",
       "m4.16xlarge",
       "m4.10xlarge",
       "m3.xlarge",
       "m3.medium",
       "m3.large",
       "m3.2xlarge",
       "cc2.8xlarge",
       "c5.xlarge",
       "c5.large",
       "c5.4xlarge",
       "c5.9xlarge",
       "c4.xlarge",
       "c4.8xlarge",
       "c4.4xlarge",
       "c4.2xlarge",
       "c3.xlarge",
       "c3.8xlarge",
       "c3.4xlarge",
       "c3.2xlarge",
       "c5n.2xlarge",
       "c5n.4xlarge"
      ],
      "ConstraintDescription": "Must be a valid EC2 instance type for BIG-IP",
      "Default": "m5.xlarge",
      "Description": "Size of the F5 BIG-IP Virtual Instance",
      "Type": "String"
     },
     "licenseKey1": {
      "AllowedPattern": "([\\x41-\\x5A][\\x41-\\x5A|\\x30-\\x39]{4})\\-([\\x41-\\x5A|\\x30-\\x39]{5})\\-([\\x41-\\x5A|\\x30-\\x39]{5})\\-([\\x41-\\x5A|\\x30-\\x39]{5})\\-([\\x41-\\x5A|\\x30-\\x39]{7})",
      "ConstraintDescription": "Verify your F5 BYOL regkey.",
      "Description": "F5 BYOL license key",
      "MaxLength": "255",
      "MinLength": "1",
      "Type": "String"
     },
     "licenseKey2": {
      "AllowedPattern": "([\\x41-\\x5A][\\x41-\\x5A|\\x30-\\x39]{4})\\-([\\x41-\\x5A|\\x30-\\x39]{5})\\-([\\x41-\\x5A|\\x30-\\x39]{5})\\-([\\x41-\\x5A|\\x30-\\x39]{5})\\-([\\x41-\\x5A|\\x30-\\x39]{7})",
      "ConstraintDescription": "Verify your F5 BYOL regkey.",
      "Description": "F5 BYOL license key",
      "MaxLength": "255",
      "MinLength": "1",
      "Type": "String"
     },
     "ntpServer": {
      "Default": "0.pool.ntp.org",
      "Description": "NTP server for this implementation",
      "Type": "String"
     },
     "owner": {
      "Default": "f5owner",
      "Description": "Name of the Owner Tag",
      "Type": "String"
     },
     "restrictedSrcAddress": {
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
      "Description": " The IP address range used to SSH and access managment GUI on the EC2 instances",
      "MaxLength": "18",
      "MinLength": "9",
      "Type": "String"
     },
     "restrictedSrcAddressApp": {
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
      "Description": " The IP address range that can be used to access web traffic (80/443) to the EC2 instances",
      "MaxLength": "18",
      "MinLength": "9",
      "Type": "String"
     },
     "sshKey": {
      "Description": "EC2 KeyPair to enable SSH access to the BIG-IP instance",
      "Type": "AWS::EC2::KeyPair::KeyName"
     },
     "timezone": {
      "Default": "UTC",
      "Description": "Olson timezone string. Acceptable values can be found from /usr/share/zoneinfo directory located on BIG-IP. Also, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones referencing the TZ* column for Olsen timezone examples.",
      "Type": "String"
     }
    },
    "Resources": {
     "Bigip1Instance": { 
      "Metadata": {
       "AWS::CloudFormation::Init": {
        "configSets" : {
            "SCCA" : [ "config", "bigipstig", "dodCerts", "AS3-baseline-routing", "mgmt-baseline", "app1-baseline" ],
            "Enterprise": [ "config", "AS3-baseline-routing", "mgmt-baseline" ]
          },
        "config": {
         "commands": {
          "000-disable-1nicautoconfig": {
           "command": "/usr/bin/setdb provision.1nicautoconfig disable"
          },
          "010-install-libs": {
           "command": {
            "Fn::Join": [
             " ",
             [
              "mkdir -p /var/log/cloud/aws;",
              "nohup /config/installCloudLibs.sh",
              "&>> /var/log/cloud/aws/install.log < /dev/null &"
             ]
            ]
           }
          },
          "020-generate-password": {
           "command": {
            "Fn::Join": [
             "",
             [
              "nohup /config/waitThenRun.sh",
              " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
              " --signal PASSWORD_CREATED",
              " --file f5-rest-node",
              " --cl-args '/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword --encrypt'",
              " --log-level silly",
              " -o /var/log/cloud/aws/generatePassword.log",
              " &>> /var/log/cloud/aws/install.log < /dev/null",
              " &"
             ]
            ]
           }
          },
          "030-create-admin-user": {
           "command": {
            "Fn::Join": [
             "",
             [
              "nohup /config/waitThenRun.sh",
              " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
              " --wait-for PASSWORD_CREATED",
              " --signal ADMIN_CREATED",
              " --file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/createUser.sh",
              " --cl-args '--user admin",
              " --password-file /config/cloud/aws/.adminPassword",
              " --password-encrypted",
              "'",
              " --log-level silly",
              " -o /var/log/cloud/aws/createUser.log",
              " &>> /var/log/cloud/aws/install.log < /dev/null",
              " &"
             ]
            ]
           }
          },
          "040-network-config": {
           "command": {
            "Fn::Join": [
             "",
             [
              "GATEWAY_MAC=`ifconfig eth1 | egrep ether | awk '{print tolower($2)}'`; ",
              "GATEWAY_CIDR_BLOCK=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/subnet-ipv4-cidr-block`; ",
              "GATEWAY_NET=${GATEWAY_CIDR_BLOCK%/*}; ",
              "GATEWAY_PREFIX=${GATEWAY_CIDR_BLOCK#*/}; ",
              "GATEWAY=`echo ${GATEWAY_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",
              "GATEWAY_MAC2=`ifconfig eth2 | egrep ether | awk '{print tolower($2)}'`\n",
              "GATEWAY_CIDR_BLOCK2=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC2}/subnet-ipv4-cidr-block`; ",
              "GATEWAY_PREFIX2=${GATEWAY_CIDR_BLOCK2#*/}; ",
              "nohup /config/waitThenRun.sh ",
              "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/network.js ",
              "--host localhost ",
              "--user admin ",
              "--password-url file:///config/cloud/aws/.adminPassword ",
              "--password-encrypted ",
              "-o /var/log/cloud/aws/network.log ",
              "--log-level silly ",
              "--wait-for ADMIN_CREATED ",
              "--signal NETWORK_CONFIG_DONE ",
              "--vlan name:external,nic:1.1 ",
              "--default-gw ${GATEWAY} ",
              "--self-ip name:external-self,address:",
              {
                "Fn::GetAtt": [
                 "Bigip1subnet1Az1Interface",
                 "PrimaryPrivateIpAddress"
                ]
               },
              "/${GATEWAY_PREFIX},vlan:external,allow:none ",
              "--vlan name:internal,nic:1.2 ",
              "--self-ip 'name:internal-self,address:",
              {
               "Fn::GetAtt": [
                "Bigip1InternalInterface",
                "PrimaryPrivateIpAddress"
               ]
              },
              "/'${GATEWAY_PREFIX2}',vlan:internal,allow:tcp:4353 udp:1026' ",
              "&>> /var/log/cloud/aws/install.log < /dev/null &"
             ]
            ]
           }
          },
          "050-onboard-BIG-IP": {
           "command": {
            "Fn::If": [
             "optin",
             {
              "Fn::Join": [
               " ",
               [
                "REGION=\"",
                {
                 "Ref": "AWS::Region"
                },
                "\";",
                "DEPLOYMENTID=`echo \"",
                {
                 "Ref": "AWS::StackId"
                },
                "\"|sha512sum|cut -d \" \" -f 1`;",
                "CUSTOMERID=`echo \"",
                {
                 "Ref": "AWS::AccountId"
                },
                "\"|sha512sum|cut -d \" \" -f 1`;",
                "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`;",
                "nohup /config/waitThenRun.sh",
                "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
                "--install-ilx-package file:///config/cloud/f5-appsvcs-3.5.1-5.noarch.rpm",
                "--wait-for NETWORK_CONFIG_DONE",
                "--signal ONBOARD_DONE",
                "-o /var/log/cloud/aws/onboard.log",
                "--log-level silly",
                "--no-reboot",
                "--host localhost",
                "--user admin",
                "--password-url file:///config/cloud/aws/.adminPassword",
                "--password-encrypted",
                "--hostname `curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`",
                "--ntp ",
                {
                 "Ref": "ntpServer"
                },
                "--tz ",
                {
                 "Ref": "timezone"
                },
                "--dns ${NAME_SERVER}",
                {
                    "Fn::If":
                       [
                           "Tier1",
                           "--modules ltm:nominal,afm:nominal",
                           "--modules ltm:nominal,asm:nominal,apm:nominal"
                        ]
                },
                "--license ",
                {
                 "Ref": "licenseKey1"
                },
                "--metrics \"cloudName:aws,region:${REGION},bigipVersion:14.1.0.3-0.0.6,customerId:${CUSTOMERID},deploymentId:${DEPLOYMENTID},templateName:f5-existing-stack-same-az-cluster-byol-3nic-bigip.template,templateVersion:4.2.0,licenseType:byol\"",
                "-d tm.tcpudptxchecksum:software-only ",
                "--ping",
                "&>> /var/log/cloud/aws/install.log < /dev/null &"
               ]
              ]
             },
             {
              "Fn::Join": [
               " ",
               [
                "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`;",
                "nohup /config/waitThenRun.sh",
                "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
                "--install-ilx-package file:///config/cloud/f5-appsvcs-3.5.1-5.noarch.rpm",
                "--wait-for NETWORK_CONFIG_DONE",
                "--signal ONBOARD_DONE",
                "-o /var/log/cloud/aws/onboard.log",
                "--log-level silly",
                "--no-reboot",
                "--host localhost",
                "--user admin",
                "--password-url file:///config/cloud/aws/.adminPassword",
                "--password-encrypted",
                "--hostname `curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`",
                "--ntp ",
                {
                 "Ref": "ntpServer"
                },
                "--tz ",
                {
                 "Ref": "timezone"
                },
                "--dns ${NAME_SERVER}",
                {
                    "Fn::If":
                       [
                           "Tier1",
                           "--modules ltm:nominal,afm:nominal",
                           "--modules ltm:nominal,asm:nominal,apm:nominal"
                        ]
                },
                "--license ",
                {
                 "Ref": "licenseKey1"
                },
                "-d tm.tcpudptxchecksum:software-only ",
                "--ping",
                "&>> /var/log/cloud/aws/install.log < /dev/null &"
               ]
              ]
             }
            ]
           }
          },
          "060-custom-config": {
           "command": {
            "Fn::Join": [
             " ",
             [
              "nohup /config/waitThenRun.sh",
              "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
              "--file /config/cloud/aws/custom-config.sh",
              "--cwd /config/cloud/aws",
              "-o /var/log/cloud/aws/custom-config.log",
              "--log-level silly",
              "--wait-for ONBOARD_DONE",
              "--signal CUSTOM_CONFIG_DONE",
              "&>> /var/log/cloud/aws/install.log < /dev/null &"
             ]
            ]
           }
          },
          "065-cluster": {
           "command": {
            "Fn::Join": [
             " ",
             [
              "HOSTNAME=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`;",
              "nohup /config/waitThenRun.sh",
              "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/cluster.js",
              "--wait-for CUSTOM_CONFIG_DONE",
              "--signal CLUSTER_DONE",
              "-o /var/log/cloud/aws/cluster.log",
              "--log-level silly",
              "--host localhost",
              "--user admin",
              "--password-url file:///config/cloud/aws/.adminPassword",
              "--password-encrypted",
              "--cloud aws",
              "--provider-options 's3Bucket:",
              {
               "Ref": "S3Bucket"
              },
              "'",
              "--master",
              "--config-sync-ip",
              {
               "Fn::GetAtt": [
                "Bigip1InternalInterface",
                "PrimaryPrivateIpAddress"
               ]
              },
              "--create-group",
              "--device-group same_az_failover_group",
              "--sync-type sync-failover",
              "--network-failover",
              "--device ${HOSTNAME}",
              "--auto-sync",
              "&>> /var/log/cloud/aws/install.log < /dev/null &"
             ]
            ]
           }
          },
          "070-rm-password": {
           "command": {
            "Fn::Join": [
             " ",
             [
              "nohup /config/waitThenRun.sh",
              "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
              "--file /config/cloud/aws/rm-password.sh",
              "-o /var/log/cloud/aws/rm-password.log",
              "--log-level silly",
              "--wait-for CLUSTER_DONE",
              "--signal PASSWORD_REMOVED",
              "&>> /var/log/cloud/aws/install.log < /dev/null &"
             ]
            ]
           }
          }
         },
         "files": {
          "/config/cloud/aws/custom-config.sh": {
           "content": {
            "Fn::Join": [
             "",
             [
              "#!/bin/bash\n",
              "EXTIP='",
              {
               "Fn::GetAtt": [
                "Bigip1subnet1Az1Interface",
                "PrimaryPrivateIpAddress"
               ]
              },
              "'\n",
              "EXTPRIVIP='",
              {
               "Fn::Select": [
                "0",
                {
                 "Fn::GetAtt": [
                  "Bigip1subnet1Az1Interface",
                  "SecondaryPrivateIpAddresses"
                 ]
                }
               ]
              },
              "'\n",
              "HOSTNAME=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`\n",
              "INTIP='",
              {
               "Fn::GetAtt": [
                "Bigip1InternalInterface",
                "PrimaryPrivateIpAddress"
               ]
              },
              "'\n",
              "PEER_EXTPRIVIP='",
              {
               "Fn::Select": [
                "0",
                {
                 "Fn::GetAtt": [
                  "Bigip2subnet1Az1Interface",
                  "SecondaryPrivateIpAddresses"
                 ]
                }
               ]
              },
              "'\n",
              "VIPEIP='",
              {
               "Ref": "Bigip1VipEipAddress"
              },
              "'\n",
              "PROGNAME=$(basename $0)\n",
              "function error_exit {\n",
              "echo \"${PROGNAME}: ${1:-\\\"Unknown Error\\\"}\" 1>&2\n",
              "exit 1\n",
              "}\n",
              "declare -a tmsh=()\n",
              "echo 'starting custom-config.sh'\n",
              "tmsh+=(\n",
              "\"tmsh modify sys db dhclient.mgmt { value disable }\"\n",
              "\"tmsh modify cm device ${HOSTNAME} unicast-address { { effective-ip ${INTIP} effective-port 1026 ip ${INTIP} } }\"\n",
              "\"tmsh load sys application template /config/cloud/aws/f5.service_discovery.tmpl\"\n",
              "\"tmsh load sys application template /config/cloud/aws/f5.cloud_logger.v1.0.0.tmpl\"\n",
              "\"tmsh load sys application template /config/cloud/aws/f5.aws_advanced_ha.v1.4.0rc3.tmpl\"\n",
              "\"tmsh save /sys config\")\n",
              "for CMD in \"${tmsh[@]}\"\n",
              "do\n",
              "  \"/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/waitForMcp.sh\"\n",
              "    if $CMD;then\n",
              "        echo \"command $CMD successfully executed.\"\n",
              "    else\n",
              "        error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
              "    fi\n",
              "done\n",
              "date\n",
              "### START CUSTOM CONFIGURATION\n",
              "source /config/cloud/aws/onboard_config_vars\n",
              "deployed=\"no\"\n",
              "url_regex=\"(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$\"\n",
              "file_loc=\"/config/cloud/custom_config\"\n",
              "if [[ $declarationUrl =~ $url_regex ]]; then\n",
              "  response_code=$(/usr/bin/curl -sk -w \"%{http_code}\" $declarationUrl -o $file_loc)\n",
              "  if [[ $response_code == 200 ]]; then\n",
              "    echo \"Custom config download complete; checking for valid JSON.\"\n",
              "    cat $file_loc | jq .class\n",
              "    if [[ $? == 0 ]]; then\n",
              "      response_code=$(/usr/bin/curl -skvvu ${adminUsername}:$passwd -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" https://localhost:${managementGuiPort}/mgmt/shared/appsvcs/declare -d @$file_loc -o /dev/null)\n",
              "      if [[ $response_code == 200 || $response_code == 502 ]]; then\n",
              "        echo \"Deployment of custom application succeeded.\"\n",
              "        deployed=\"yes\"\n",
              "      else\n",
              "         echo \"Failed to deploy custom application; continuing...\"\n",
              "      fi\n",
              "    else\n",
              "      echo \"Custom config was not valid JSON, continuing...\"\n",
              "    fi\n",
              "  else\n",
              "    echo \"Failed to download custom config; continuing...\"\n",
              "  fi\n",
              "else\n",
              "  echo \"Custom config was not a URL, continuing...\"\n",
              "fi\n",
              "### END CUSTOM CONFIGURATION"
             ]
            ]
           },
           "group": "root",
           "mode": "000755",
           "owner": "root"
          },
          "/config/cloud/aws/f5.aws_advanced_ha.v1.4.0rc3.tmpl": {
            "group": "root",
            "mode": "000755",
            "owner": "root",
            "source": "https://raw.githubusercontent.com/F5Networks/f5-aws-cloudformation/v3.1.0/iApps/f5.aws_advanced_ha.v1.4.0rc3.tmpl"
           },
          "/config/cloud/aws/f5.cloud_logger.v1.0.0.tmpl": {
           "group": "root",
           "mode": "000755",
           "owner": "root",
           "source": "http://cdn.f5.com/product/cloudsolutions/iapps/common/f5-cloud-logger/v1.0.0/f5.cloud_logger.v1.0.0.tmpl"
          },
          "/config/cloud/aws/f5.service_discovery.tmpl": {
           "group": "root",
           "mode": "000755",
           "owner": "root",
           "source": "http://cdn.f5.com/product/cloudsolutions/iapps/common/f5-service-discovery/v2.3.2/f5.service_discovery.tmpl"
          },
          "/config/cloud/aws/getNameServer.sh": {
           "content": {
            "Fn::Join": [
             "\n",
             [
              "INTERFACE=$1",
              "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep ether | awk '{print tolower($2)}'`",
              "VPC_CIDR_BLOCK=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
              "VPC_NET=${VPC_CIDR_BLOCK%/*}",
              "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
              "echo $NAME_SERVER"
             ]
            ]
           },
           "group": "root",
           "mode": "000755",
           "owner": "root"
          },
          "/config/cloud/aws/onboard_config_vars": {
           "content": {
            "Fn::Join": [
             "",
             [
              "",
              "#!/bin/bash\n",
              "# Generated from 4.2.0\n",
              "MGMTIP=$(/sbin/ifconfig mgmt | grep 'inet' | cut -d: -f2 | awk '{print $2}')\n",
              "\n",
              "/sbin/ip route add 169.254.169.254/32 via $MGMTIP dev mgmt 2>/dev/null\n",
              "\n",
              "hostname=`curl http://169.254.169.254/latest/meta-data/hostname`\n",
              "region='",
              {
               "Ref": "AWS::Region"
              },
              "'\n",
              "adminUsername='admin'\n",
              "managementGuiPort='443'\n",
              "timezone='",
              {
               "Ref": "timezone"
              },
              "'\n",
              "ntpServer='",
              {
               "Ref": "ntpServer"
              },
              "'\n",
              "declarationUrl='",
              {
               "Ref": "declarationUrl"
              },
              "'\n",
              "passwd=$(f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/decryptDataFromFile.js --data-file /config/cloud/aws/.adminPassword)\n"
             ]
            ]
           },
           "group": "root",
           "mode": "000755",
           "owner": "root"
          },
          "/config/cloud/aws/rm-password.sh": {
           "content": {
            "Fn::Join": [
             "",
             [
              "#!/bin/bash\n",
              "PROGNAME=$(basename $0)\n",
              "function error_exit {\n",
              "echo \"${PROGNAME}: ${1:-\"Unknown Error\"}\" 1>&2\n",
              "exit 1\n",
              "}\n",
              "date\n",
              "echo 'starting rm-password.sh'\n",
              "declare -a tmsh=()\n",
              "tmsh+=(\"rm /config/cloud/aws/.adminPassword\")\n",
              "for CMD in \"${tmsh[@]}\"\n",
              "do\n",
              "  if $CMD;then\n",
              "      echo \"command $CMD successfully executed.\"\n",
              "  else\n",
              "      error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
              "  fi\n",
              "done\n",
              "date\n"
             ]
            ]
           },
           "group": "root",
           "mode": "000755",
           "owner": "root"
          },
          "/config/cloud/f5-appsvcs-3.5.1-5.noarch.rpm": {
           "group": "root",
           "mode": "000755",
           "owner": "root",
           "source": "http://cdn.f5.com/product/cloudsolutions/f5-appsvcs-extension/v3.6.0/dist/lts/f5-appsvcs-3.5.1-5.noarch.rpm"
          },
          "/config/cloud/f5-cloud-libs-aws.tar.gz": {
           "group": "root",
           "mode": "000755",
           "owner": "root",
           "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs-aws/v2.4.0/f5-cloud-libs-aws.tar.gz"
          },
          "/config/cloud/f5-cloud-libs.tar.gz": {
           "group": "root",
           "mode": "000755",
           "owner": "root",
           "source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/v4.8.3/dist/f5-cloud-libs.tar.gz"
          },
          "/config/installCloudLibs.sh": {
           "content": {
            "Fn::Join": [
             "\n",
             [
              "#!/bin/bash",
              "echo about to execute",
              "checks=0",
              "while [ $checks -lt 120 ]; do echo checking mcpd",
              "    tmsh -a show sys mcp-state field-fmt | grep -q running",
              "    if [ $? == 0 ]; then",
              "        echo mcpd ready",
              "        break",
              "    fi",
              "    echo mcpd not ready yet",
              "    let checks=checks+1",
              "    sleep 10",
              "done",
              "echo loading verifyHash script",
              "if ! tmsh load sys config merge file /config/verifyHash; then",
              "    echo cannot validate signature of /config/verifyHash",
              "    exit",
              "fi",
              "echo loaded verifyHash",
              "declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\" \"/config/cloud/f5-appsvcs-3.5.1-5.noarch.rpm\" \"/config/cloud/aws/f5.service_discovery.tmpl\" \"/config/cloud/aws/f5.cloud_logger.v1.0.0.tmpl\")",
              "for fileToVerify in \"${filesToVerify[@]}\"",
              "do",
              "    echo verifying \"$fileToVerify\"",
              "    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
              "        echo \"$fileToVerify\" is not valid",
              "        exit 1",
              "    fi",
              "    echo verified \"$fileToVerify\"",
              "done",
              "mkdir -p /config/cloud/aws/node_modules/@f5devcentral",
              "echo expanding f5-cloud-libs.tar.gz",
              "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
              "echo installing dependencies",
              "tar xvfz /config/cloud/f5-cloud-libs-aws.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
              "echo cloud libs install complete",
              "touch /config/cloud/cloudLibsReady"
             ]
            ]
           },
           "group": "root",
           "mode": "000755",
           "owner": "root"
          },
          "/config/verifyHash": {
           "content": "cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) 86d24521063640bfaaafa882f491974e39b46c700554dd8591d681139df25b0bed4dfe934545c2894e0a27a513ae7498a52e6deac00b5399f301badbfb8a91e0\n            set hashes(f5-cloud-libs-aws.tar.gz) 076c969cbfff12efacce0879820262b7787c98645f1105667cc4927d4acfe2466ed64c777b6d35957f6df7ae266937dde42fef4c8b1f870020a366f7f910ffb5\n            set hashes(f5-cloud-libs-azure.tar.gz) 57fae388e8aa028d24a2d3fa2c029776925011a72edb320da47ccd4fb8dc762321c371312f692b7b8f1c84e8261c280f6887ba2e0f841b50547e6e6abc8043ba\n            set hashes(f5-cloud-libs-gce.tar.gz) 1677835e69967fd9882ead03cbdd24b426627133b8db9e41f6de5a26fef99c2d7b695978ac189f00f61c0737e6dbb638d42dea43a867ef4c01d9507d0ee1fb2f\n            set hashes(f5-cloud-libs-openstack.tar.gz) 5c83fe6a93a6fceb5a2e8437b5ed8cc9faf4c1621bfc9e6a0779f6c2137b45eab8ae0e7ed745c8cf821b9371245ca29749ca0b7e5663949d77496b8728f4b0f9\n            set hashes(f5-cloud-libs-consul.tar.gz) a32aab397073df92cbbba5067e5823e9b5fafca862a258b60b6b40aa0975c3989d1e110f706177b2ffbe4dde65305a260a5856594ce7ad4ef0c47b694ae4a513\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f\n            set hashes(f5.aws_advanced_ha.v1.4.0rc3.tmpl) 2f2339b4bc3a23c9cfd42aae2a6de39ba0658366f25985de2ea53410a745f0f18eedc491b20f4a8dba8db48970096e2efdca7b8efffa1a83a78e5aadf218b134\n            set hashes(f5.aws_advanced_ha.v1.4.0rc4.tmpl) 2418ac8b1f1884c5c096cbac6a94d4059aaaf05927a6a4508fd1f25b8cc6077498839fbdda8176d2cf2d274a27e6a1dae2a1e3a0a9991bc65fc74fc0d02ce963\n            set hashes(f5.aws_advanced_ha.v1.4.0rc5.tmpl) 5e582187ae1a6323e095d41eddd41151d6bd38eb83c634410d4527a3d0e246a8fc62685ab0849de2ade62b0275f51264d2deaccbc16b773417f847a4a1ea9bc4\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 1a3a3c6274ab08a7dc2cb73aedc8d2b2a23cd9e0eb06a2e1534b3632f250f1d897056f219d5b35d3eed1207026e89989f754840fd92969c515ae4d829214fb74\n            set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620\n            set hashes(f5.service_discovery.tmpl) 4811a95372d1dbdbb4f62f8bcc48d4bc919fa492cda012c81e3a2fe63d7966cc36ba8677ed049a814a930473234f300d3f8bced2b0db63176d52ac99640ce81b\n            set hashes(f5.cloud_logger.v1.0.0.tmpl) 64a0ed3b5e32a037ba4e71d460385fe8b5e1aecc27dc0e8514b511863952e419a89f4a2a43326abb543bba9bc34376afa114ceda950d2c3bd08dab735ff5ad20\n            set hashes(f5-appsvcs-3.5.1-5.noarch.rpm) ba71c6e1c52d0c7077cdb25a58709b8fb7c37b34418a8338bbf67668339676d208c1a4fef4e5470c152aac84020b4ccb8074ce387de24be339711256c0fa78c8\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature TjGIQtBj6gmevtbkCb9uwhrzm02aFer0KYwVeIvwBPssYRAJ7T/mc91LWODrSs9U12XAAtxQKHsG3XYWvklyB79fe/7C+589WvIhG814/OoXd1dplcH7O+EF5LBMdXEY4VQNw+5HuSl89tvBIkHGMCXSRAj8hHDIx9kqOF4OirExaJBZopb2qTY0P7AmhjpzFCvkJLUcmz7H5LZCfFCDYWWB5g5Bst7ZkLWfP2arMtxLRTFl/m6x4QttOeD9wktPGajn1XhvXThtzJ8vlTJJRuk/OyLJPr+64qkXwi3wngudiiZeFnCiI1Mrggp96B+yKtCqRsABJju6LMdH80T1Zg==\n    signing-key /Common/f5-irule\n}",
           "group": "root",
           "mode": "000755",
           "owner": "root"
          },
          "/config/waitThenRun.sh": {
           "content": {
            "Fn::Join": [
             "\n",
             [
              "#!/bin/bash",
              "while true; do echo \"waiting for cloud libs install to complete\"",
              "    if [ -f /config/cloud/cloudLibsReady ]; then",
              "        break",
              "    else",
              "        sleep 10",
              "    fi",
              "done",
              "\"$@\""
             ]
            ]
           },
           "group": "root",
           "mode": "000755",
           "owner": "root"
          }
         }
        },
        "bigipstig": {
            "commands": {
                "081-apply-stigs": {
                    "test" : "[ -f /config/bigipstig.sh ]",
                    "command": {
                        "Fn::Join": [
                            " ",
                            [
                             "nohup /config/waitThenRun.sh",
                             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
                             "--file /config/bigipstig.sh",
                             "--output /var/log/bigipstig.log",
                             "--log-level silly",
                             "--wait-for CLUSTER_DONE",
                             "--signal BIGIPSTIG_DONE",
                             "&>> /var/log/cloud/aws/install.log < /dev/null &"
                            ]
                           ]
                    },
                    "cwd" : "/config"
                  }
            },
            "files":{
                "/config/bigipstig.sh": {
                    "group": "root",
                    "mode": "000755",
                    "owner": "root",
                    "source": "https://raw.githubusercontent.com/mikeoleary/aws-sca-resources/master/bigipstig.sh"
                }
            }
        },
        "dodCerts": {
            "commands": {
                  "082-install-DoD-Root-CA": { 
                    "test" : "[ -f /config/Certificates_PKCS7_v5.5_DoD.zip -a -f /config/installTrustedCerts.sh ]",
                    "command": { 
                       "Fn::Join": [  
                        " ", 
                        [ 
                         "nohup /config/waitThenRun.sh",
                         "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
                         "--file /config/installTrustedCerts.sh",
                         "--output /var/log/installTrustedCerts.log",
                         "--log-level silly",
                         "--wait-for BIGIPSTIG_DONE",
                         "--signal CERTS_DONE",
                         "&>> /var/log/cloud/aws/install.log < /dev/null &"
                        ] 
                       ] 
                  }, 
                  "cwd" : "/config"  
                  }
            },
            "files":{
                "/config/Certificates_PKCS7_v5.5_DoD.zip": {
                    "group": "root",
                    "mode": "000755",
                    "owner": "root",
                    "source": "https://github.com/mikeoleary/aws-sca-resources/raw/master/Certificates_PKCS7_v5.5_DoD.zip"
                },
                "/config/installTrustedCerts.sh": {
                    "content": {
                        "Fn::Join": [
                                " ", 
                                [ 
                                "unzip Certificates_PKCS7_v5.5_DoD.zip", 
                                "&& openssl pkcs7 -print_certs", 
                                "-in ./Certificates_PKCS7_v5.5_DoD/Certificates_PKCS7_v5.5_DoD.pem.p7b", 
                                "-out DoD_Root_CA.cer", 
                                "&& tmsh install sys crypto cert DODRoots from-local-file DoD_Root_CA.cer" 
                                ] 
                                ] 
                        },
                    "group": "root",
                    "mode": "000755",
                    "owner": "root"
                }
            }
        },
        "goStandby": {
            "commands": {
                "010-goStandby": { 
                    "test" : "[ -f /config/goStandby.sh ]",
                    "command": { 
                       "Fn::Join": [  
                        " ", 
                        [ 
                         "nohup /config/waitThenRun.sh",
                         "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
                         "--file /config/goStandby.sh",
                         "--output /var/log/goStandby.log",
                         "--log-level silly",
                         {
                            "Fn::If":
                               [
                                   "SCCA",
                                   "--wait-for CERTS_DONE",
                                   "--wait-for PASSWORD_REMOVED"
                               ]
                        },
                         "--signal GO_STANDBY",
                         "&>> /var/log/cloud/aws/install.log < /dev/null &"
                        ] 
                       ] 
                  }, 
                  "cwd" : "/config"  
                  }
            },
            "files": {
                "/config/goStandby.sh": {
                    "content": {
                        "Fn::Join": [
                                "", 
                                [ 
                                    "#!/bin/bash\n",
                                    "tmsh run /sys failover standby"
                                ] 
                        ] 
                    },
                    "group": "root",
                    "mode": "000755",
                    "owner": "root"
                }
            }
        },
        "AS3-baseline-routing": {
            "commands": {
                "083-apply-AS3-baseline-routing": { 
                    "test" : "[ -f /config/deployBaselineRouting.sh ]",
                    "command": { 
                       "Fn::Join": [  
                        " ", 
                        [ 
                         "nohup /config/waitThenRun.sh",
                         "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
                         "--file /config/deployBaselineRouting.sh",
                         "--output /var/log/deployBaselineRouting.log",
                         "--log-level silly",
                         {
                            "Fn::If":
                               [
                                   "SCCA",
                                   "--wait-for CERTS_DONE",
                                   "--wait-for PASSWORD_REMOVED"
                               ]
                        },
                         "--signal AS3_ROUTING_DONE",
                         "&>> /var/log/cloud/aws/install.log < /dev/null &"
                        ] 
                       ] 
                  }, 
                  "cwd" : "/config"  
                  } 
                  
            },
            "files": {
                "/config/deployBaselineRouting.sh": {
                    "group": "root",
                    "mode": "000755",
                    "owner": "root",
                    "content": {
                        "Fn::Join": [
                            "",
                            [
                            "#!/bin/bash\n",
                            "declarationUrlrouting='",
                            {
                            "Ref": "declarationUrlrouting"
                            },
                            "'\n",
                            "VIP1='",
                            {
                            "Fn::GetAtt": [
                            "Bigip1subnet1Az1Interface",
                            "PrimaryPrivateIpAddress"
                            ]
                            },
                            "'\n",
                            "VIP2='",
                            {
                            "Fn::GetAtt": [
                            "Bigip2subnet1Az1Interface",
                            "PrimaryPrivateIpAddress"
                            ]
                            },
                            "'\n",
                            "\n",
                            "### START DEPLOYMENT OF AS3 DECLARATION FOR MGMT ACCESS\n",
                            "source /config/cloud/aws/onboard_config_vars\n",
                            "deployed=\"no\"\n",
                            "url_regex=\"(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$\"\n",
                            "file_loc=\"/config/cloud/as3_config\"\n",
                            "if [[ $declarationUrlrouting =~ $url_regex ]]; then\n",
                            "  response_code=$(/usr/bin/curl -sk -w \"%{http_code}\" $declarationUrlrouting -o $file_loc)\n",
                            "  sed -i 's/ReplaceWithVIP1/'\"$VIP1\"'/g' $file_loc\n",
                            "  if [[ $response_code == 200 ]]; then\n",
                            "    echo \"AS3 download complete; checking for valid JSON.\"\n",
                            "    cat $file_loc | jq .class\n",
                            "    if [[ $? == 0 ]]; then\n",
                            "      response_code=$(/usr/bin/curl -skvvu ${adminUsername}:XXX -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" https://localhost:${managementGuiPort}/mgmt/shared/appsvcs/declare -d @$file_loc -o /dev/null)\n",
                            "      if [[ $response_code == 200 || $response_code == 502 ]]; then\n",
                            "        echo \"Deployment of custom application succeeded.\"\n",
                            "        deployed=\"yes\"\n",
                            "      else\n",
                            "         echo \"Failed to deploy AS3 declaration; continuing...\"\n",
                            "      fi\n",
                            "    else\n",
                            "      echo \"Custom config was not valid JSON, continuing...\"\n",
                            "    fi\n",
                            "  else\n",
                            "    echo \"Failed to download custom config; continuing...\"\n",
                            "  fi\n",
                            "else\n",
                            "  echo \"Custom config was not a URL, continuing...\"\n",
                            "fi\n",
                            "### END DEPLOYMENT OF AS3 DECLARATION FOR MGMT ACCESS"
                            ]
                        ]
                    }
                }   
            }
        },
        "mgmt-baseline": {
            "commands": {
                "084-apply-mgmt-baseline": { 
                    "test" : "[ -f /config/deployBaseline.sh ]",
                    "command": { 
                       "Fn::Join": [  
                        " ", 
                        [ 
                         "nohup /config/waitThenRun.sh",
                         "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
                         "--file /config/deployBaseline.sh",
                         "--output /var/log/deployBaseline.log",
                         "--log-level silly",
                         "--wait-for AS3_ROUTING_DONE",
                         "--signal MGMT_DONE",
                         "&>> /var/log/cloud/aws/install.log < /dev/null &"
                        ] 
                       ] 
                  }, 
                  "cwd" : "/config"  
                  } 
                  
            },
            "files": {
                "/config/deployBaseline.sh": {
                  "group": "root",
                  "mode": "000755",
                  "owner": "root",
                  "content": {
                      "Fn::Join": [
                          "",
                          [
                          "#!/bin/bash\n",
                          "partition=\"mgmt\"",
                          "\n",
                          "virtualAddress='",
                          {
                            "Fn::Select": [
                                "0",
                                {
                                    "Fn::GetAtt": [
                                    "Bigip1subnet1Az1Interface",
                                    "SecondaryPrivateIpAddresses"
                                    ]
                                }
                                ]
                          },
                          "'\n",
                          "virtualAddress2='",
                          {
                          "Fn::GetAtt": [
                          "Bigip2subnet1Az1Interface",
                          "PrimaryPrivateIpAddress"
                          ]
                          },
                          "'\n",
                          "\n",
                          "### FILE CREATION FOR MGMT ACCESS\n",
                          "echo  -e 'create cli transaction;\n",
                          "create auth partition '${partition}' { };\n",
                          "submit cli transaction' | tmsh -q\n",
                          "\n",
                          "echo  -e 'create cli transaction;\n",
                          "cd /'${partition}';\n",
                          "create ltm virtual /'${partition}'/forward_outbound { description foward_outbound destination /'${partition}'/0.0.0.0:any mask any persist replace-all-with { /Common/source_addr {default yes } } profiles replace-all-with { /Common/fastL4 {} } source 0.0.0.0/0 source-address-translation { type automap } translate-address disabled translate-port disabled };\n",
                          "modify security ip-intelligence global-policy ip-intelligence-policy ip-intelligence;\n",
                          "submit cli transaction' | tmsh -q\n",
                          "\n",
                          "### END DEPLOYMENT OF FILE CREATION FOR MGMT ACCESS"
                          ]
                      ]
                  }
              },
              "/config/deleteBaseline.sh": {
                "group": "root",
                "mode": "000755",
                "owner": "root",
                "content": {
                    "Fn::Join": [
                        "",
                        [
                        "#!/bin/bash\n",
                        "partition=\"mgmt\"",
                        "\n",
                        "virtualAddress='",
                        {
                            "Fn::Select": [
                                "0",
                                {
                                    "Fn::GetAtt": [
                                    "Bigip1subnet1Az1Interface",
                                    "SecondaryPrivateIpAddresses"
                                    ]
                                }
                                ]
                            },
                        "'\n",
                        "virtualAddress2='",
                        {
                        "Fn::GetAtt": [
                        "Bigip2subnet1Az1Interface",
                        "PrimaryPrivateIpAddress"
                        ]
                        },
                        "'\n",
                        "\n",
                        "### DELETE ITEMS FOR MGMT ACCESS\n",
                        "echo  -e 'create cli transaction;\n",
                        "delete ltm virtual /'${partition}'/forward_outbound;\n",
                        "submit cli transaction' | tmsh -q\n",
                        "\n",
                        "echo  -e 'create cli transaction;\n",
                        "delete auth partition '${partition}'\n",
                        "submit cli transaction' | tmsh -q\n",
                        "\n",
                        "### END DEPLOYMENT OF OBJECT REMOVAL FOR MGMT ACCESS"
                        ]
                    ]
                }
            }
            }
          },
          "app1-baseline": {
            "commands": {
                "085-apply-app1-baseline": { 
                    "test" : "[ -f /config/deployapp1.sh ]",
                    "command": { 
                       "Fn::Join": [  
                        " ", 
                        [ 
                         "nohup /config/waitThenRun.sh",
                         "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
                         "--file /config/deployapp1.sh",
                         "--output /var/log/deployapp1.log",
                         "--log-level silly",
                         "--wait-for MGMT_DONE",
                         "--signal APP1_DONE",
                         "&>> /var/log/cloud/aws/install.log < /dev/null &"
                        ] 
                       ] 
                  }, 
                  "cwd" : "/config"  
                  } 
                  
            },
            "files": {
                "/config/owasp-auto-tune.xml": {
                  "group": "root",
                  "mode": "000755",
                  "owner": "root",
                  "source": "https://raw.githubusercontent.com/f5devcentral/f5-asm-policy-templates/master/owasp_ready_template/owasp-auto-tune-v1.1.xml"
                },
                "/config/deployapp1.sh": {
                  "group": "root",
                  "mode": "000755",
                  "owner": "root",
                  "content": { 
                    "Fn::If": [
                        "Tier1",
                    {"Fn::Join": [  
                     "", 
                     [ 
                        "#!/bin/bash\n",
                        "partition=\"app1\"\n",
                        "\n",
                        "appName=\"app1\"\n",
                        "# tag\n",
                        "tagKey=\"Tier2Vip\"\n", 
                        "tagValue=\"app1\"\n",
                        "\n",
                        "virtualAddress='",
                        {
                            "Fn::Select": [
                                "1",
                                {
                                    "Fn::GetAtt": [
                                    "Bigip1subnet1Az1Interface",
                                    "SecondaryPrivateIpAddresses"
                                    ]
                                }
                                ]
                          },
                        "'\n",
                        "virtualAddress2='",
                        {
                        "Fn::GetAtt": [
                        "Bigip2subnet1Az1Interface",
                        "PrimaryPrivateIpAddress"
                        ]
                        },
                        "'\n",
                        "node1='",
                        {
                        "Ref": "pVirtualPrivateIP"
                        },
                        "'\n",
                        "\n",
                        "# afm policy\n",
                        "afmPolicy=\"app1\"\n",
                        "# partition\n",
                        "echo  -e 'create cli transaction;\n",
                        "create auth partition '${partition}' { };\n",
                        "submit cli transaction' | tmsh -q\n",
                        "# afm policy\n",
                        "echo  -e 'create cli transaction;\n",
                        "cd /'${partition}';\n",
                        "create security firewall rule-list /'${partition}'/'${afmPolicy}' { rules replace-all-with { http { action accept-decisively ip-protocol tcp protocol-inspection-profile /Common/protocol_inspection uuid auto-generate destination { ports replace-all-with { http { } } } } https { action accept-decisively ip-protocol tcp protocol-inspection-profile /Common/protocol_inspection uuid auto-generate destination { ports replace-all-with { https { } } } } } };\n",
                        "create security firewall policy /'${partition}'/'${afmPolicy}' { rules replace-all-with { _'${partition}'_'${appName}' { rule-list '${appName}' } deny { action drop ip-protocol any log yes uuid auto-generate } } };\n",
                        "submit cli transaction' | tmsh -q\n",
                        "\n",
                        "# logging profile\n",
                        "echo  -e 'create cli transaction;\n",
                        "cd /'${partition}';\n",
                        "create security log profile /'${partition}'/'${afmPolicy}'_afm { ip-intelligence { log-publisher local-db-publisher } network replace-all-with { '${partition}'/'${afmPolicy}'_afm { publisher local-db-publisher } } protocol-inspection { log-publisher local-db-publisher } }\n",
                        "submit cli transaction' | tmsh -q\n",
                        "\n",
                        "#virtual servers\n",
                        "echo  -e 'create cli transaction;\n",
                        "cd /'${partition}';\n",
                        "create ltm node /'${partition}'/'${node1}' { address '${node1}' };\n",
                        "create ltm virtual /'${partition}'/'${appName}'_http { description '${appName}'_http destination /'${partition}'/'${virtualAddress}':http ip-protocol tcp mask 255.255.255.255 persist none profiles replace-all-with { /Common/f5-tcp-progressive {} http } rules { /Common/_sys_https_redirect } source 0.0.0.0/0 source-address-translation { type automap } translate-address enabled translate-port enabled };\n",
                        "create ltm pool /'${partition}'/'${appName}'_https_pool { members none min-active-members 1 monitor min 1 of { /Common/https } };\n",
                        "create ltm virtual /'${partition}'/'${appName}'_https {  description '${appName}'_https destination /'${partition}'/'${virtualAddress}':https ip-protocol tcp mask 255.255.255.255 pool /'${partition}'/'${appName}'_https_pool profiles replace-all-with { /Common/f5-tcp-progressive { } http } source 0.0.0.0/0 source-address-translation { type automap } translate-address enabled translate-port enabled };\n",
                        "submit cli transaction' | tmsh -q\n",
                        "\n",
                        "# add afm and logging\n",
                        "echo  -e 'create cli transaction;\n",
                        "modify ltm virtual /'${partition}'/'${afmPolicy}'_https fw-enforced-policy /'${partition}'/'${afmPolicy}' security-log-profiles add { /'${partition}'/'${afmPolicy}'_afm } ip-intelligence-policy ip-intelligence;\n",
                        "modify ltm virtual /'${partition}'/'${afmPolicy}'_http ip-intelligence-policy ip-intelligence;\n",
                        "submit cli transaction' | tmsh -q\n",
                        "\n",
                        "#service Discovery pool\n",
                        "echo  -e 'create cli transaction;\n",
                        "create sys application service /'${partition}'/'${appName}' template f5.service_discovery device-group same_az_failover_group traffic-group traffic-group-1 strict-updates disabled variables replace-all-with { basic__advanced { value no } basic__display_help { value hide } cloud__aws_bigip_in_ec2 { value yes } cloud__aws_region { value ",
                        {
                            "Ref": "AWS::Region"
                        },
                        " } cloud__aws_use_role { value no } cloud__cloud_provider { value aws } monitor__frequency { value 30 } monitor__http_method { value GET } monitor__http_version { value http11 } monitor__monitor { value \"/#create_new#\" } monitor__response { value 200 } monitor__type { value https } monitor__uri { value / } pool__interval { value 10 } pool__member_conn_limit { value 0 } pool__member_port { value 443 } pool__pool_to_use { value \"/'${partition}'/'${appName}'_https_pool\" } pool__public_private { value private } pool__tag_key { value '${tagKey}' } pool__tag_value { value '${tagValue}' } };\n",
                        "submit cli transaction' | tmsh -q\n",
                        "\n",
                        "# save config\n",
                        "echo  -e 'create cli transaction;\n",
                        "save sys config partitions all;\n",
                        "submit cli transaction' | tmsh -q\n",
                        "\n",
                        "### END DEPLOYMENT OF FILE CREATION FOR TIER1 APP ACCESS"
                     ] 
                    ]},
                    {"Fn::Join":[
                        "",
                        [
                        "#!/bin/bash\n",
                            "partition=\"app1\"\n",
                            "\n",
                            "appName=\"app1\"\n",
                            "# tag\n",
                            "tagKey=\"APPNAME\"\n", 
                            "tagValue=\"LINUXSERVER\"\n",
                            "\n",
                            "virtualAddress='",
                            {
                                "Fn::Select": [
                                    "1",
                                    {
                                        "Fn::GetAtt": [
                                        "Bigip1subnet1Az1Interface",
                                        "SecondaryPrivateIpAddresses"
                                        ]
                                    }
                                    ]
                              },
                            "'\n",
                            "virtualAddress2='",
                            {
                            "Fn::GetAtt": [
                            "Bigip2subnet1Az1Interface",
                            "PrimaryPrivateIpAddress"
                            ]
                            },
                            "'\n",
                            "node1='",
                            {
                            "Ref": "pVirtualPrivateIP"
                            },
                            "'\n",
                            "\n",
                            "asmPolicy=\"app1\"\n",
                            "asmFile=\"/config/owasp-auto-tune.xml\"\n",
                            "### FILE CREATION FOR APP ACCESS\n",
                            "#partition\n",
                            "echo  -e 'create cli transaction;\n",
                            "create auth partition '${partition}' { };\n",
                            "submit cli transaction' | tmsh -q\n",
                            "\n",
                            "# asm policy\n",
                            "echo  -e 'create cli transaction;\n",
                            "cd /'${partition}';\n",
                            "load asm policy file '${asmFile}'\n",
                            "submit cli transaction' | tmsh -q\n",
                            "\n",
                            "# traffic policy\n",
                            "echo  -e 'create cli transaction;\n",
                            "cd /'${partition}';\n",
                            "create ltm policy /'${partition}'/Drafts/app1_asm_policy_https controls add { asm } rules add { default { actions add { 1 { asm enable policy /Common/owasp-auto-tune} } ordinal 1 } } strategy /Common/first-match;\n", 
                            "submit cli transaction' | tmsh -q\n",
                            "\n",
                            "# publish traffic policy\n",
                            "echo  -e 'create cli transaction;\n",
                            "cd /'${partition}';\n",
                            "publish ltm policy /'${partition}'/Drafts/app1_asm_policy_https;\n",
                            "submit cli transaction' | tmsh -q\n",
                            "\n",
                            "#virtual servers\n",
                            "echo  -e 'create cli transaction;\n",
                            "cd /'${partition}';\n",
                            "create ltm node /'${partition}'/'${node1}' { address '${node1}' };\n",
                            "create ltm virtual /'${partition}'/'${appName}'_http { description '${appName}'_http destination /'${partition}'/'${virtualAddress}':http ip-protocol tcp mask 255.255.255.255 persist none profiles replace-all-with { /Common/f5-tcp-progressive {} http } rules { /Common/_sys_https_redirect } source 0.0.0.0/0 source-address-translation { type automap } translate-address enabled translate-port enabled };\n",
                            "create ltm pool /'${partition}'/'${appName}'_https_pool { members none min-active-members 1 monitor min 1 of { /Common/https } };\n",
                            "create ltm virtual /'${partition}'/'${appName}'_https {  description '${appName}'_https destination /'${partition}'/'${virtualAddress}':https ip-protocol tcp mask 255.255.255.255 persist replace-all-with { /Common/cookie { default yes } } pool /'${partition}'/'${appName}'_https_pool security-log-profiles add { \"Log all requests\" } profiles replace-all-with { /Common/f5-tcp-progressive { } http websecurity } source 0.0.0.0/0 source-address-translation { type automap } translate-address enabled translate-port enabled };\n",
                            "submit cli transaction' | tmsh -q\n",
                            "\n",
                            "# create BotDef and logging profile\n",
                            "echo  -e 'create cli transaction;\n",
                            "create security log profile /'${partition}'/'${appName}'_sec_log application replace-all-with { /'${partition}'/'${appName}' { filter replace-all-with {  request-type { values replace-all-with { all } } } response-logging illegal } } bot-defense replace-all-with { /'${partition}'/'${appName}' { filter { log-alarm enabled log-block enabled log-browser enabled log-browser-verification-action enabled log-captcha enabled log-device-id-collection-request enabled log-malicious-bot enabled log-mobile-application enabled log-none enabled log-rate-limit enabled log-suspicious-browser enabled log-tcp-reset enabled log-trusted-bot enabled log-unknown enabled log-untrusted-bot enabled } local-publisher /Common/local-db-publisher } };\n",
                            "create security bot-defense profile /'${partition}'/'${appName}'_bot {  api-access-strict-mitigation enabled app-service none blocking-page {  type default }  captcha-response { failure {  type default } first { type default } } cross-domain-requests allow-all description none deviceid-mode generate-after-access  dos-attack-strict-mitigation enabled enforcement-mode transparent enforcement-readiness-period 7 grace-period 300  mobile-detection { allow-android-rooted-device disabled allow-any-android-package enabled allow-any-ios-package enabled allow-emulators disabled allow-jailbroken-devices disabled block-debugger-enabled-device enabled client-side-challenge-mode pass } perform-challenge-in-transparent disabled signature-staging-upon-update disabled single-page-application disabled template relaxed whitelist replace-all-with { apple_touch_1 { match-order 2 url /apple-touch-icon*.png } favicon_1 { match-order 1 url /favicon.ico } } };\n",
                            "submit cli transaction' | tmsh -q\n",
                            "\n",
                            "# add asm bot and logging\n",
                            "echo  -e 'create cli transaction;\n",
                            "modify ltm virtual /'${partition}'/'${appName}'_https profiles add { /'${partition}'/'${appName}'_bot } policies add { /'${partition}'/'${appName}'_asm_policy_https} security-log-profiles replace-all-with { /'${partition}'/'${appName}'_sec_log };\n",
                            "submit cli transaction' | tmsh -q\n",
                            "\n",
                            "\n",
                            "#service Discovery pool\n",
                            "echo  -e 'create cli transaction;\n",
                            "create sys application service /'${partition}'/'${appName}' template f5.service_discovery device-group same_az_failover_group traffic-group traffic-group-1 strict-updates disabled variables replace-all-with { basic__advanced { value no } basic__display_help { value hide } cloud__aws_bigip_in_ec2 { value yes } cloud__aws_region { value ",
                            {
                                "Ref": "AWS::Region"
                            },
                            " } cloud__aws_use_role { value no } cloud__cloud_provider { value aws } monitor__frequency { value 30 } monitor__http_method { value GET } monitor__http_version { value http11 } monitor__monitor { value \"/#create_new#\" } monitor__response { value 200 } monitor__type { value https } monitor__uri { value / } pool__interval { value 10 } pool__member_conn_limit { value 0 } pool__member_port { value 443 } pool__pool_to_use { value \"/'${partition}'/'${appName}'_https_pool\" } pool__public_private { value private } pool__tag_key { value '${tagKey}' } pool__tag_value { value '${tagValue}' } };\n",
                            "submit cli transaction' | tmsh -q\n",
                            "\n",
                            "# save config\n",
                            "echo  -e 'create cli transaction;\n",
                            "save sys config partitions all;\n",
                            "submit cli transaction' | tmsh -q\n",
                            "\n",
                            "### END DEPLOYMENT OF FILE CREATION FOR TIER3 APP ACCESS"
                        ]
                    ]}
                    ]
               }
              }
            }
          }
       }
      },
      "Properties": {
       "BlockDeviceMappings": [
        {
         "DeviceName": "/dev/xvda",
         "Ebs": {
          "DeleteOnTermination": "true",
          "VolumeSize": "100",
          "VolumeType": "gp2"
         }
        },
        {
         "DeviceName": "/dev/xvdb",
         "NoDevice": {}
        }
       ],
       "IamInstanceProfile": {
        "Ref": "bigipServiceDiscoveryProfile"
       },
       "ImageId": {
        "Fn::If": [
         "noCustomImageId",
         {
          "Fn::FindInMap": [
           "BigipRegionMap",
           {
            "Ref": "AWS::Region"
           },
           {
            "Ref": "imageName"
           }
          ]
         },
         {
          "Ref": "customImageId"
         }
        ]
       },
       "InstanceType": {
        "Ref": "instanceType"
       },
       "KeyName": {
        "Ref": "sshKey"
       },
       "NetworkInterfaces": [
        {
         "Description": "Management Interface",
         "DeviceIndex": "0",
         "NetworkInterfaceId": {
          "Ref": "Bigip1ManagementInterface"
         }
        },
        {
         "Description": "Public or External Interface",
         "DeviceIndex": "1",
         "NetworkInterfaceId": {
          "Ref": "Bigip1subnet1Az1Interface"
         }
        },
        {
         "Description": "Private or Internal Interface",
         "DeviceIndex": "2",
         "NetworkInterfaceId": {
          "Ref": "Bigip1InternalInterface"
         }
        }
       ],
       "Tags": [
        {
         "Key": "Application",
         "Value": {
          "Ref": "application"
         }
        },
        {
         "Key": "Costcenter",
         "Value": {
          "Ref": "costcenter"
         }
        },
        {
         "Key": "Environment",
         "Value": {
          "Ref": "environment"
         }
        },
        {
         "Key": "Group",
         "Value": {
          "Ref": "group"
         }
        },
        {
         "Key": "Name",
         "Value": {
          "Fn::Join": [
           "",
           [
            "BIG-IP Device 1: ",
            {
             "Ref": "AWS::StackName"
            }
           ]
          ]
         }
        },
        {
         "Key": "Owner",
         "Value": {
          "Ref": "owner"
         }
        }
       ],
       "UserData": {
        "Fn::Base64": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "/opt/aws/apitools/cfn-init/bin/cfn-init -v -s ",
           {
            "Ref": "AWS::StackId"
           },
           " -r ",
           "Bigip1Instance",
           " --region ",
           {
            "Ref": "AWS::Region"
           },
           " -c ",
           {
               "Ref": "pBaselineCompliance"
            },
           "\n"
          ]
         ]
        }
       }
      },
      "Type": "AWS::EC2::Instance"
     },
     "Bigip1InternalInterface": {
      "Properties": {
       "Description": "Internal Interface for the BIG-IP",
       "GroupSet": [
        {
         "Ref": "bigipInternalSecurityGroup"
        }
       ],
       "SourceDestCheck": false,
       "SubnetId": {
        "Fn::If" : [
            "Tier1",
            {"Fn::ImportValue" : {"Fn::Sub": "${pVpcStackName}-VdssDmz1SubnetId" }},
            {"Fn::ImportValue" : {"Fn::Sub": "${pVpcStackName}-VdssInsideSubnetId" }}
          ]
       }
      },
      "Type": "AWS::EC2::NetworkInterface"
     },
     "Bigip1ManagementEipAddress": {
      "Properties": {
       "Domain": "vpc"
      },
      "Type": "AWS::EC2::EIP"
     },
     "Bigip1ManagementEipAssociation": {
      "Properties": {
       "AllocationId": {
        "Fn::GetAtt": [
         "Bigip1ManagementEipAddress",
         "AllocationId"
        ]
       },
       "NetworkInterfaceId": {
        "Ref": "Bigip1ManagementInterface"
       }
      },
      "Type": "AWS::EC2::EIPAssociation"
     },
     "Bigip1ManagementInterface": {
      "Properties": {
       "Description": "Management Interface for the BIG-IP",
       "GroupSet": [
        {
         "Ref": "bigipManagementSecurityGroup"
        }
       ],
       "SubnetId": {
        "Fn::ImportValue" : {"Fn::Sub": "${pVpcStackName}-VdssManagementSubnetId" }
       }
      },
      "Type": "AWS::EC2::NetworkInterface"
     },
     "Bigip1VipEipAddress": {
      "Properties": {
       "Domain": "vpc"
      },
      "Type": "AWS::EC2::EIP"
     },
     "Bigip1VipEipAssociation": {
      "Properties": {
       "AllocationId": {
        "Fn::GetAtt": [
         "Bigip1VipEipAddress",
         "AllocationId"
        ]
       },
       "NetworkInterfaceId": {
        "Ref": "Bigip1subnet1Az1Interface"
       },
       "PrivateIpAddress": {
        "Fn::Select": [
         "0",
         {
          "Fn::GetAtt": [
           "Bigip1subnet1Az1Interface",
           "SecondaryPrivateIpAddresses"
          ]
         }
        ]
       }
      },
      "Type": "AWS::EC2::EIPAssociation"
     },
     "Bigip1subnet1Az1Interface": {
      "Properties": {
       "Description": "Public External Interface for the BIG-IP",
       "GroupSet": [
        {
         "Ref": "bigipExternalSecurityGroup"
        }
       ],
       "SecondaryPrivateIpAddressCount": "2",
       "SourceDestCheck": false,
       "SubnetId": {
        "Fn::If" : [
            "Tier1",
            {"Fn::ImportValue" : {"Fn::Sub": "${pVpcStackName}-VdssOutsideSubnetId" }},
            {"Fn::ImportValue" : {"Fn::Sub": "${pVpcStackName}-VdssDmz2SubnetId" }}
          ]
       },
       "Tags": [
        {
            "Fn::If" : [
            "Tier1",
            {
                "Key" : "Tier1Vip",
                "Value" : "app1"
            },
            {
                "Key" : "Tier2Vip",
                "Value" : "app1"
            }
          ]
        }
        ]
      },
      "Type": "AWS::EC2::NetworkInterface"
     },
     "Bigip1subnet1Az1SelfEipAddress": {
      "Properties": {
       "Domain": "vpc"
      },
      "Type": "AWS::EC2::EIP"
     },
     "Bigip1subnet1Az1SelfEipAssociation": {
      "Properties": {
       "AllocationId": {
        "Fn::GetAtt": [
         "Bigip1subnet1Az1SelfEipAddress",
         "AllocationId"
        ]
       },
       "NetworkInterfaceId": {
        "Ref": "Bigip1subnet1Az1Interface"
       },
       "PrivateIpAddress": {
        "Fn::GetAtt": [
         "Bigip1subnet1Az1Interface",
         "PrimaryPrivateIpAddress"
        ]
       }
      },
      "Type": "AWS::EC2::EIPAssociation"
     },
     "Bigip2Instance": {
      "DependsOn": "Bigip1Instance",
       "CreationPolicy" : {
        "ResourceSignal" : {
         "Timeout" : "PT15M",
         "Count"   : "1"
         }
        },    
      "Metadata": {
       "AWS::CloudFormation::Init": {
        "configSets" : {
            "SCCA" : [ "config", "bigipstig", "signal-complete" ],
            "Enterprise": [ "config", "signal-complete" ]
          },
        "config": {
         "commands": {
          "000-disable-1nicautoconfig": {
           "command": "/usr/bin/setdb provision.1nicautoconfig disable"
          },
          "010-install-libs": {
           "command": {
            "Fn::Join": [
             " ",
             [
              "mkdir -p /var/log/cloud/aws;",
              "nohup /config/installCloudLibs.sh",
              "&>> /var/log/cloud/aws/install.log < /dev/null &"
             ]
            ]
           }
          },
          "020-generate-password": {
           "command": {
            "Fn::Join": [
             "",
             [
              "nohup /config/waitThenRun.sh",
              " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
              " --signal PASSWORD_CREATED",
              " --file f5-rest-node",
              " --cl-args '/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword --encrypt'",
              " --log-level silly",
              " -o /var/log/cloud/aws/generatePassword.log",
              " &>> /var/log/cloud/aws/install.log < /dev/null",
              " &"
             ]
            ]
           }
          },
          "030-create-admin-user": {
           "command": {
            "Fn::Join": [
             "",
             [
              "nohup /config/waitThenRun.sh",
              " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
              " --wait-for PASSWORD_CREATED",
              " --signal ADMIN_CREATED",
              " --file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/createUser.sh",
              " --cl-args '--user admin",
              " --password-file /config/cloud/aws/.adminPassword",
              " --password-encrypted",
              "'",
              " --log-level silly",
              " -o /var/log/cloud/aws/createUser.log",
              " &>> /var/log/cloud/aws/install.log < /dev/null",
              " &"
             ]
            ]
           }
          },
          "040-network-config": {
           "command": {
            "Fn::Join": [
             "",
             [
              "GATEWAY_MAC=`ifconfig eth1 | egrep ether | awk '{print tolower($2)}'`; ",
              "GATEWAY_CIDR_BLOCK=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/subnet-ipv4-cidr-block`; ",
              "GATEWAY_NET=${GATEWAY_CIDR_BLOCK%/*}; ",
              "GATEWAY_PREFIX=${GATEWAY_CIDR_BLOCK#*/}; ",
              "GATEWAY=`echo ${GATEWAY_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",
              "GATEWAY_MAC2=`ifconfig eth2 | egrep ether | awk '{print tolower($2)}'`\n",
              "GATEWAY_CIDR_BLOCK2=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC2}/subnet-ipv4-cidr-block`; ",
              "GATEWAY_PREFIX2=${GATEWAY_CIDR_BLOCK2#*/}; ",
              "nohup /config/waitThenRun.sh ",
              "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/network.js ",
              "--host localhost ",
              "--user admin ",
              "--password-url file:///config/cloud/aws/.adminPassword ",
              "--password-encrypted ",
              "-o /var/log/cloud/aws/network.log ",
              "--log-level silly ",
              "--wait-for ADMIN_CREATED ",
              "--signal NETWORK_CONFIG_DONE ",
              "--vlan name:external,nic:1.1 ",
              "--default-gw ${GATEWAY} ",
              "--self-ip name:external-self,address:",
              {
               "Fn::GetAtt": [
                "Bigip2subnet1Az1Interface",
                "PrimaryPrivateIpAddress"
               ]
              },
              "/${GATEWAY_PREFIX},vlan:external,allow:none ",
              "--vlan name:internal,nic:1.2 ",
              "--self-ip 'name:internal-self,address:",
              {
               "Fn::GetAtt": [
                "Bigip2InternalInterface",
                "PrimaryPrivateIpAddress"
               ]
              },
              "/'${GATEWAY_PREFIX2}',vlan:internal,allow:tcp:4353 udp:1026' ",
              "&>> /var/log/cloud/aws/install.log < /dev/null &"
             ]
            ]
           }
          },
          "050-onboard-BIG-IP": {
           "command": {
            "Fn::If": [
             "optin",
             {
              "Fn::Join": [
               " ",
               [
                "REGION=\"",
                {
                 "Ref": "AWS::Region"
                },
                "\";",
                "DEPLOYMENTID=`echo \"",
                {
                 "Ref": "AWS::StackId"
                },
                "\"|sha512sum|cut -d \" \" -f 1`;",
                "CUSTOMERID=`echo \"",
                {
                 "Ref": "AWS::AccountId"
                },
                "\"|sha512sum|cut -d \" \" -f 1`;",
                "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`;",
                "nohup /config/waitThenRun.sh",
                "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
                "--install-ilx-package file:///config/cloud/f5-appsvcs-3.5.1-5.noarch.rpm",
                "--wait-for NETWORK_CONFIG_DONE",
                "--signal ONBOARD_DONE",
                "-o /var/log/cloud/aws/onboard.log",
                "--log-level silly",
                "--no-reboot",
                "--host localhost",
                "--user admin",
                "--password-url file:///config/cloud/aws/.adminPassword",
                "--password-encrypted",
                "--hostname `curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`",
                "--ntp ",
                {
                 "Ref": "ntpServer"
                },
                "--tz ",
                {
                 "Ref": "timezone"
                },
                "--dns ${NAME_SERVER}",
                {
                    "Fn::If":
                       [
                           "Tier1",
                           "--modules ltm:nominal,afm:nominal",
                           "--modules ltm:nominal,asm:nominal,apm:nominal"
                        ]
                },
                "--license ",
                {
                 "Ref": "licenseKey2"
                },
                "--metrics \"cloudName:aws,region:${REGION},bigipVersion:14.1.0.3-0.0.6,customerId:${CUSTOMERID},deploymentId:${DEPLOYMENTID},templateName:f5-existing-stack-same-az-cluster-byol-3nic-bigip.template,templateVersion:4.2.0,licenseType:byol\"",
                "-d tm.tcpudptxchecksum:software-only ",
                "--ping",
                "&>> /var/log/cloud/aws/install.log < /dev/null &"
               ]
              ]
             },
             {
              "Fn::Join": [
               " ",
               [
                "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`;",
                "nohup /config/waitThenRun.sh",
                "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
                "--install-ilx-package file:///config/cloud/f5-appsvcs-3.5.1-5.noarch.rpm",
                "--wait-for NETWORK_CONFIG_DONE",
                "--signal ONBOARD_DONE",
                "-o /var/log/cloud/aws/onboard.log",
                "--log-level silly",
                "--no-reboot",
                "--host localhost",
                "--user admin",
                "--password-url file:///config/cloud/aws/.adminPassword",
                "--password-encrypted",
                "--hostname `curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`",
                "--ntp ",
                {
                 "Ref": "ntpServer"
                },
                "--tz ",
                {
                 "Ref": "timezone"
                },
                "--dns ${NAME_SERVER}",
                {
                    "Fn::If":
                       [
                           "Tier1",
                           "--modules ltm:nominal,afm:nominal",
                           "--modules ltm:nominal,asm:nominal,apm:nominal"
                        ]
                },
                "--license ",
                {
                 "Ref": "licenseKey2"
                },
                "-d tm.tcpudptxchecksum:software-only ",
                "--ping",
                "&>> /var/log/cloud/aws/install.log < /dev/null &"
               ]
              ]
             }
            ]
           }
          },
          "060-custom-config": {
           "command": {
            "Fn::Join": [
             " ",
             [
              "nohup /config/waitThenRun.sh",
              "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
              "--file /config/cloud/aws/custom-config.sh",
              "--cwd /config/cloud/aws",
              "-o /var/log/cloud/aws/custom-config.log",
              "--log-level silly",
              "--wait-for ONBOARD_DONE",
              "--signal CUSTOM_CONFIG_DONE",
              "&>> /var/log/cloud/aws/install.log < /dev/null &"
             ]
            ]
           }
          },
          "065-cluster": {
           "command": {
            "Fn::Join": [
             " ",
             [
              "nohup /config/waitThenRun.sh",
              "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/cluster.js",
              "--wait-for CUSTOM_CONFIG_DONE",
              "--signal CLUSTER_DONE",
              "-o /var/log/cloud/aws/cluster.log",
              "--log-level silly",
              "--host localhost",
              "--user admin",
              "--password-url file:///config/cloud/aws/.adminPassword",
              "--password-encrypted",
              "--cloud aws",
              "--provider-options 's3Bucket:",
              {
               "Ref": "S3Bucket"
              },
              "'",
              "--config-sync-ip",
              {
               "Fn::GetAtt": [
                "Bigip2InternalInterface",
                "PrimaryPrivateIpAddress"
               ]
              },
              "--join-group",
              "--device-group same_az_failover_group",
              "--remote-host ",
              {
               "Fn::GetAtt": [
                "Bigip1ManagementInterface",
                "PrimaryPrivateIpAddress"
               ]
              },
              "&>> /var/log/cloud/aws/install.log < /dev/null &"
             ]
            ]
           }
          },
          "070-rm-password": {
           "command": {
            "Fn::Join": [
             " ",
             [
              "nohup /config/waitThenRun.sh",
              "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
              "--file /config/cloud/aws/rm-password.sh",
              "-o /var/log/cloud/aws/rm-password.log",
              "--log-level silly",
              "--wait-for CLUSTER_DONE",
              "--signal PASSWORD_REMOVED",
              "&>> /var/log/cloud/aws/install.log < /dev/null &"
             ]
            ]
           }
          }
         },
         "files": {
          "/config/cloud/aws/custom-config.sh": {
           "content": {
            "Fn::Join": [
             "",
             [
              "#!/bin/bash\n",
              "EXTIP='",
              {
               "Fn::GetAtt": [
                "Bigip2subnet1Az1Interface",
                "PrimaryPrivateIpAddress"
               ]
              },
              "'\n",
              "EXTPRIVIP='",
              {
               "Fn::Select": [
                "0",
                {
                 "Fn::GetAtt": [
                  "Bigip2subnet1Az1Interface",
                  "SecondaryPrivateIpAddresses"
                 ]
                }
               ]
              },
              "'\n",
              "MGMTIP=$(/sbin/ifconfig mgmt | grep 'inet' | cut -d: -f2 | awk '{print $2}')\n",
              "\n",
              "/sbin/ip route add 169.254.169.254/32 via $MGMTIP dev mgmt 2>/dev/null\n",
              "\n",
              "HOSTNAME=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`\n",
              "INTIP='",
              {
               "Fn::GetAtt": [
                "Bigip2InternalInterface",
                "PrimaryPrivateIpAddress"
               ]
              },
              "'\n",
              "PROGNAME=$(basename $0)\n",
              "function error_exit {\n",
              "echo \"${PROGNAME}: ${1:-\\\"Unknown Error\\\"}\" 1>&2\n",
              "exit 1\n",
              "}\n",
              "declare -a tmsh=()\n",
              "echo 'starting custom-config.sh'\n",
              "tmsh+=(\n",
              "\"tmsh modify sys db dhclient.mgmt { value disable }\"\n",
              "\"tmsh modify cm device ${HOSTNAME} unicast-address { { effective-ip ${INTIP} effective-port 1026 ip ${INTIP} } }\"\n",
              "\"tmsh save /sys config\")\n",
              "for CMD in \"${tmsh[@]}\"\n",
              "do\n",
              "  \"/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/waitForMcp.sh\"\n",
              "    if $CMD;then\n",
              "        echo \"command $CMD successfully executed.\"\n",
              "    else\n",
              "        error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
              "    fi\n",
              "done\n",
              "date\n"
             ]
            ]
           },
           "group": "root",
           "mode": "000755",
           "owner": "root"
          },
          "/config/cloud/aws/f5.aws_advanced_ha.v1.4.0rc3.tmpl": {
            "group": "root",
            "mode": "000755",
            "owner": "root",
            "source": "https://raw.githubusercontent.com/F5Networks/f5-aws-cloudformation/v3.1.0/iApps/f5.aws_advanced_ha.v1.4.0rc3.tmpl"
           },
          "/config/cloud/aws/f5.cloud_logger.v1.0.0.tmpl": {
           "group": "root",
           "mode": "000755",
           "owner": "root",
           "source": "http://cdn.f5.com/product/cloudsolutions/iapps/common/f5-cloud-logger/v1.0.0/f5.cloud_logger.v1.0.0.tmpl"
          },
          "/config/cloud/aws/f5.service_discovery.tmpl": {
           "group": "root",
           "mode": "000755",
           "owner": "root",
           "source": "http://cdn.f5.com/product/cloudsolutions/iapps/common/f5-service-discovery/v2.3.2/f5.service_discovery.tmpl"
          },
          "/config/cloud/aws/getNameServer.sh": {
           "content": {
            "Fn::Join": [
             "\n",
             [
              "INTERFACE=$1",
              "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep ether | awk '{print tolower($2)}'`",
              "VPC_CIDR_BLOCK=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
              "VPC_NET=${VPC_CIDR_BLOCK%/*}",
              "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
              "echo $NAME_SERVER"
             ]
            ]
           },
           "group": "root",
           "mode": "000755",
           "owner": "root"
          },
          "/config/cloud/aws/onboard_config_vars": {
           "content": {
            "Fn::Join": [
             "",
             [
              "",
              "#!/bin/bash\n",
              "# Generated from 4.2.0\n",
              "MGMTIP=$(/sbin/ifconfig mgmt | grep 'inet' | cut -d: -f2 | awk '{print $2}')\n",
              "\n",
              "/sbin/ip route add 169.254.169.254/32 via $MGMTIP dev mgmt 2>/dev/null\n",
              "\n",
              "hostname=`curl http://169.254.169.254/latest/meta-data/hostname`\n",
              "region='",
              {
               "Ref": "AWS::Region"
              },
              "'\n",
              "adminUsername='admin'\n",
              "managementGuiPort='443'\n",
              "timezone='",
              {
               "Ref": "timezone"
              },
              "'\n",
              "ntpServer='",
              {
               "Ref": "ntpServer"
              },
              "'\n",
              "declarationUrl='",
              {
               "Ref": "declarationUrl"
              },
              "'\n",
              "passwd=$(f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/decryptDataFromFile.js --data-file /config/cloud/aws/.adminPassword)\n"
             ]
            ]
           },
           "group": "root",
           "mode": "000755",
           "owner": "root"
          },
          "/config/cloud/aws/rm-password.sh": {
           "content": {
            "Fn::Join": [
             "",
             [
              "#!/bin/bash\n",
              "PROGNAME=$(basename $0)\n",
              "function error_exit {\n",
              "echo \"${PROGNAME}: ${1:-\"Unknown Error\"}\" 1>&2\n",
              "exit 1\n",
              "}\n",
              "date\n",
              "echo 'starting rm-password.sh'\n",
              "declare -a tmsh=()\n",
              "tmsh+=(\"rm /config/cloud/aws/.adminPassword\")\n",
              "for CMD in \"${tmsh[@]}\"\n",
              "do\n",
              "  if $CMD;then\n",
              "      echo \"command $CMD successfully executed.\"\n",
              "  else\n",
              "      error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
              "  fi\n",
              "done\n",
              "date\n"
             ]
            ]
           },
           "group": "root",
           "mode": "000755",
           "owner": "root"
          },
          "/config/cloud/f5-appsvcs-3.5.1-5.noarch.rpm": {
           "group": "root",
           "mode": "000755",
           "owner": "root",
           "source": "http://cdn.f5.com/product/cloudsolutions/f5-appsvcs-extension/v3.6.0/dist/lts/f5-appsvcs-3.5.1-5.noarch.rpm"
          },
          "/config/cloud/f5-cloud-libs-aws.tar.gz": {
           "group": "root",
           "mode": "000755",
           "owner": "root",
           "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs-aws/v2.4.0/f5-cloud-libs-aws.tar.gz"
          },
          "/config/cloud/f5-cloud-libs.tar.gz": {
           "group": "root",
           "mode": "000755",
           "owner": "root",
           "source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/v4.8.3/dist/f5-cloud-libs.tar.gz"
          },
          "/config/installCloudLibs.sh": {
           "content": {
            "Fn::Join": [
             "\n",
             [
              "#!/bin/bash",
              "echo about to execute",
              "checks=0",
              "while [ $checks -lt 120 ]; do echo checking mcpd",
              "    tmsh -a show sys mcp-state field-fmt | grep -q running",
              "    if [ $? == 0 ]; then",
              "        echo mcpd ready",
              "        break",
              "    fi",
              "    echo mcpd not ready yet",
              "    let checks=checks+1",
              "    sleep 10",
              "done",
              "echo loading verifyHash script",
              "if ! tmsh load sys config merge file /config/verifyHash; then",
              "    echo cannot validate signature of /config/verifyHash",
              "    exit",
              "fi",
              "echo loaded verifyHash",
              "declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\" \"/config/cloud/f5-appsvcs-3.5.1-5.noarch.rpm\" \"/config/cloud/aws/f5.service_discovery.tmpl\" \"/config/cloud/aws/f5.cloud_logger.v1.0.0.tmpl\")",
              "for fileToVerify in \"${filesToVerify[@]}\"",
              "do",
              "    echo verifying \"$fileToVerify\"",
              "    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
              "        echo \"$fileToVerify\" is not valid",
              "        exit 1",
              "    fi",
              "    echo verified \"$fileToVerify\"",
              "done",
              "mkdir -p /config/cloud/aws/node_modules/@f5devcentral",
              "echo expanding f5-cloud-libs.tar.gz",
              "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
              "echo installing dependencies",
              "tar xvfz /config/cloud/f5-cloud-libs-aws.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
              "echo cloud libs install complete",
              "touch /config/cloud/cloudLibsReady"
             ]
            ]
           },
           "group": "root",
           "mode": "000755",
           "owner": "root"
          },
          "/config/verifyHash": {
           "content": "cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) 86d24521063640bfaaafa882f491974e39b46c700554dd8591d681139df25b0bed4dfe934545c2894e0a27a513ae7498a52e6deac00b5399f301badbfb8a91e0\n            set hashes(f5-cloud-libs-aws.tar.gz) 076c969cbfff12efacce0879820262b7787c98645f1105667cc4927d4acfe2466ed64c777b6d35957f6df7ae266937dde42fef4c8b1f870020a366f7f910ffb5\n            set hashes(f5-cloud-libs-azure.tar.gz) 57fae388e8aa028d24a2d3fa2c029776925011a72edb320da47ccd4fb8dc762321c371312f692b7b8f1c84e8261c280f6887ba2e0f841b50547e6e6abc8043ba\n            set hashes(f5-cloud-libs-gce.tar.gz) 1677835e69967fd9882ead03cbdd24b426627133b8db9e41f6de5a26fef99c2d7b695978ac189f00f61c0737e6dbb638d42dea43a867ef4c01d9507d0ee1fb2f\n            set hashes(f5-cloud-libs-openstack.tar.gz) 5c83fe6a93a6fceb5a2e8437b5ed8cc9faf4c1621bfc9e6a0779f6c2137b45eab8ae0e7ed745c8cf821b9371245ca29749ca0b7e5663949d77496b8728f4b0f9\n            set hashes(f5-cloud-libs-consul.tar.gz) a32aab397073df92cbbba5067e5823e9b5fafca862a258b60b6b40aa0975c3989d1e110f706177b2ffbe4dde65305a260a5856594ce7ad4ef0c47b694ae4a513\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f\n            set hashes(f5.aws_advanced_ha.v1.4.0rc3.tmpl) 2f2339b4bc3a23c9cfd42aae2a6de39ba0658366f25985de2ea53410a745f0f18eedc491b20f4a8dba8db48970096e2efdca7b8efffa1a83a78e5aadf218b134\n            set hashes(f5.aws_advanced_ha.v1.4.0rc4.tmpl) 2418ac8b1f1884c5c096cbac6a94d4059aaaf05927a6a4508fd1f25b8cc6077498839fbdda8176d2cf2d274a27e6a1dae2a1e3a0a9991bc65fc74fc0d02ce963\n            set hashes(f5.aws_advanced_ha.v1.4.0rc5.tmpl) 5e582187ae1a6323e095d41eddd41151d6bd38eb83c634410d4527a3d0e246a8fc62685ab0849de2ade62b0275f51264d2deaccbc16b773417f847a4a1ea9bc4\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 1a3a3c6274ab08a7dc2cb73aedc8d2b2a23cd9e0eb06a2e1534b3632f250f1d897056f219d5b35d3eed1207026e89989f754840fd92969c515ae4d829214fb74\n            set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620\n            set hashes(f5.service_discovery.tmpl) 4811a95372d1dbdbb4f62f8bcc48d4bc919fa492cda012c81e3a2fe63d7966cc36ba8677ed049a814a930473234f300d3f8bced2b0db63176d52ac99640ce81b\n            set hashes(f5.cloud_logger.v1.0.0.tmpl) 64a0ed3b5e32a037ba4e71d460385fe8b5e1aecc27dc0e8514b511863952e419a89f4a2a43326abb543bba9bc34376afa114ceda950d2c3bd08dab735ff5ad20\n            set hashes(f5-appsvcs-3.5.1-5.noarch.rpm) ba71c6e1c52d0c7077cdb25a58709b8fb7c37b34418a8338bbf67668339676d208c1a4fef4e5470c152aac84020b4ccb8074ce387de24be339711256c0fa78c8\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature TjGIQtBj6gmevtbkCb9uwhrzm02aFer0KYwVeIvwBPssYRAJ7T/mc91LWODrSs9U12XAAtxQKHsG3XYWvklyB79fe/7C+589WvIhG814/OoXd1dplcH7O+EF5LBMdXEY4VQNw+5HuSl89tvBIkHGMCXSRAj8hHDIx9kqOF4OirExaJBZopb2qTY0P7AmhjpzFCvkJLUcmz7H5LZCfFCDYWWB5g5Bst7ZkLWfP2arMtxLRTFl/m6x4QttOeD9wktPGajn1XhvXThtzJ8vlTJJRuk/OyLJPr+64qkXwi3wngudiiZeFnCiI1Mrggp96B+yKtCqRsABJju6LMdH80T1Zg==\n    signing-key /Common/f5-irule\n}",
           "group": "root",
           "mode": "000755",
           "owner": "root"
          },
          "/config/waitThenRun.sh": {
           "content": {
            "Fn::Join": [
             "\n",
             [
              "#!/bin/bash",
              "while true; do echo \"waiting for cloud libs install to complete\"",
              "    if [ -f /config/cloud/cloudLibsReady ]; then",
              "        break",
              "    else",
              "        sleep 10",
              "    fi",
              "done",
              "\"$@\""
             ]
            ]
           },
           "group": "root",
           "mode": "000755",
           "owner": "root"
          }
         }
        },
        "bigipstig": {
            "commands": {
                "081-apply-stigs": {
                    "test" : "[ -f /config/bigipstig.sh ]",
                    "command": {
                        "Fn::Join": [
                            " ",
                            [
                                "nohup /config/waitThenRun.sh",
                                "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
                                "--file /config/bigipstig.sh",
                                "--output /var/log/bigipstig.log",
                                "--log-level silly",
                                "--wait-for CLUSTER_DONE",
                                "--signal BIGIPSTIG_DONE",
                                "&>> /var/log/cloud/aws/install.log < /dev/null &"
                            ]
                            ]
                    },
                    "cwd" : "/config"
                    }
            },
            "files":{
                "/config/bigipstig.sh": {
                    "group": "root",
                    "mode": "000755",
                    "owner": "root",
                    "source": "https://raw.githubusercontent.com/mikeoleary/aws-sca-resources/master/bigipstig.sh"
                }
            }
        },
        "signal-complete": {
            "commands": {
                "010-signal-complete": { 
                    "test" : "[ -f /config/signal-complete.sh ]",
                    "command": { 
                       "Fn::Join": [  
                        " ", 
                        [ 
                         "nohup /config/waitThenRun.sh",
                         "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
                         "--file /config/signal-complete.sh",
                         "--output /var/log/signal-complete.log",
                         "--log-level silly",
                         {
                            "Fn::If":
                               [
                                   "SCCA",
                                   "--wait-for BIGIPSTIG_DONE",
                                   "--wait-for PASSWORD_REMOVED"
                               ]
                        },
                         "--signal SIGNAL_RESOURCE_COMPLETE",
                         "&>> /var/log/cloud/aws/install.log < /dev/null &"
                        ] 
                       ] 
                  }, 
                  "cwd" : "/config"  
                }
            },
            "files": {
                "/config/signal-complete.sh": {
                    "content": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "/opt/aws/apitools/cfn-init/bin/cfn-signal ",
                                "         --stack ", { "Ref" : "AWS::StackName" },
                                "         --resource Bigip2Instance ",
                                "         --region ", { "Ref" : "AWS::Region" }, "\n"
                            ]
                        ]
                    },
                    "group": "root",
                    "mode": "000755",
                    "owner": "root"
                }
            }
        }
        }
      },
      "Properties": {
       "BlockDeviceMappings": [
        {
         "DeviceName": "/dev/xvda",
         "Ebs": {
          "DeleteOnTermination": "true",
          "VolumeSize": "100",
          "VolumeType": "gp2"
         }
        },
        {
         "DeviceName": "/dev/xvdb",
         "NoDevice": {}
        }
       ],
       "IamInstanceProfile": {
        "Ref": "bigipServiceDiscoveryProfile"
       },
       "ImageId": {
        "Fn::If": [
         "noCustomImageId",
         {
          "Fn::FindInMap": [
           "BigipRegionMap",
           {
            "Ref": "AWS::Region"
           },
           {
            "Ref": "imageName"
           }
          ]
         },
         {
          "Ref": "customImageId"
         }
        ]
       },
       "InstanceType": {
        "Ref": "instanceType"
       },
       "KeyName": {
        "Ref": "sshKey"
       },
       "NetworkInterfaces": [
        {
         "Description": "Management Interface",
         "DeviceIndex": "0",
         "NetworkInterfaceId": {
          "Ref": "Bigip2ManagementInterface"
         }
        },
        {
         "Description": "Public or External Interface",
         "DeviceIndex": "1",
         "NetworkInterfaceId": {
          "Ref": "Bigip2subnet1Az1Interface"
         }
        },
        {
         "Description": "Private or Internal Interface",
         "DeviceIndex": "2",
         "NetworkInterfaceId": {
          "Ref": "Bigip2InternalInterface"
         }
        }
       ],
       "Tags": [
        {
         "Key": "Application",
         "Value": {
          "Ref": "application"
         }
        },
        {
         "Key": "Costcenter",
         "Value": {
          "Ref": "costcenter"
         }
        },
        {
         "Key": "Environment",
         "Value": {
          "Ref": "environment"
         }
        },
        {
         "Key": "Group",
         "Value": {
          "Ref": "group"
         }
        },
        {
         "Key": "Name",
         "Value": {
          "Fn::Join": [
           "",
           [
            "BIG-IP Device 2: ",
            {
             "Ref": "AWS::StackName"
            }
           ]
          ]
         }
        },
        {
         "Key": "Owner",
         "Value": {
          "Ref": "owner"
         }
        }
       ],
       "UserData": {
        "Fn::Base64": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "/opt/aws/apitools/cfn-init/bin/cfn-init -v -s ",
           {
            "Ref": "AWS::StackId"
           },
           " -r ",
           "Bigip2Instance",
           " --region ",
           {
            "Ref": "AWS::Region"
           },
           " -c ",
           {
               "Ref": "pBaselineCompliance"
            },
           "\n"
          ]
         ]
        }
       }
      },
      "Type": "AWS::EC2::Instance"
     },
     "Bigip2InternalInterface": {
      "Properties": {
       "Description": "Internal Interface for the BIG-IP",
       "GroupSet": [
        {
         "Ref": "bigipInternalSecurityGroup"
        }
       ],
       "SourceDestCheck": false,
       "SubnetId": {
        "Fn::If" : [
            "Tier1",
            {"Fn::ImportValue" : {"Fn::Sub": "${pVpcStackName}-VdssDmz1SubnetId" }},
            {"Fn::ImportValue" : {"Fn::Sub": "${pVpcStackName}-VdssInsideSubnetId" }}
          ]
       }
      },
      "Type": "AWS::EC2::NetworkInterface"
     },
     "Bigip2ManagementEipAddress": {
      "Properties": {
       "Domain": "vpc"
      },
      "Type": "AWS::EC2::EIP"
     },
     "Bigip2ManagementEipAssociation": {
      "Properties": {
       "AllocationId": {
        "Fn::GetAtt": [
         "Bigip2ManagementEipAddress",
         "AllocationId"
        ]
       },
       "NetworkInterfaceId": {
        "Ref": "Bigip2ManagementInterface"
       }
      },
      "Type": "AWS::EC2::EIPAssociation"
     },
     "Bigip2ManagementInterface": {
      "Properties": {
       "Description": "Management Interface for the BIG-IP",
       "GroupSet": [
        {
         "Ref": "bigipManagementSecurityGroup"
        }
       ],
       "SubnetId": {
        "Fn::ImportValue" : {"Fn::Sub": "${pVpcStackName}-VdssManagementSubnetId" }
       }
      },
      "Type": "AWS::EC2::NetworkInterface"
     },
     "Bigip2subnet1Az1Interface": {
      "Properties": {
       "Description": "Public External Interface for the BIG-IP",
       "GroupSet": [
        {
         "Ref": "bigipExternalSecurityGroup"
        }
       ],
       "SecondaryPrivateIpAddressCount": "1",
       "SourceDestCheck": false,
       "SubnetId": {
        "Fn::If" : [
            "Tier1",
            {"Fn::ImportValue" : {"Fn::Sub": "${pVpcStackName}-VdssOutsideSubnetId" }},
            {"Fn::ImportValue" : {"Fn::Sub": "${pVpcStackName}-VdssDmz2SubnetId" }}
          ]
       }
      },
      "Type": "AWS::EC2::NetworkInterface"
     },
     "Bigip2subnet1Az1SelfEipAddress": {
      "Properties": {
       "Domain": "vpc"
      },
      "Type": "AWS::EC2::EIP"
     },
     "Bigip2subnet1Az1SelfEipAssociation": {
      "Properties": {
       "AllocationId": {
        "Fn::GetAtt": [
         "Bigip2subnet1Az1SelfEipAddress",
         "AllocationId"
        ]
       },
       "NetworkInterfaceId": {
        "Ref": "Bigip2subnet1Az1Interface"
       },
       "PrivateIpAddress": {
        "Fn::GetAtt": [
         "Bigip2subnet1Az1Interface",
         "PrimaryPrivateIpAddress"
        ]
       }
      },
      "Type": "AWS::EC2::EIPAssociation"
     },
     "S3Bucket": {
      "Properties": {
       "AccessControl": "BucketOwnerFullControl"
      },
      "Type": "AWS::S3::Bucket"
     },
     "bigipExternalSecurityGroup": {
      "Properties": {
       "GroupDescription": "Public or external interface rules",
       "SecurityGroupIngress": [
        {
         "CidrIp": {
          "Ref": "restrictedSrcAddressApp"
         },
         "FromPort": "80",
         "IpProtocol": "tcp",
         "ToPort": "80"
        },
        {
         "CidrIp": {
          "Ref": "restrictedSrcAddressApp"
         },
         "FromPort": "443",
         "IpProtocol": "tcp",
         "ToPort": "443"
        },
        {
         "CidrIp": {
            "Ref": "restrictedSrcAddressApp"
         },
         "FromPort": "22",
         "IpProtocol": "tcp",
         "ToPort": "22"
        },
        { 
        "IpProtocol" : "icmp", 
        "FromPort" : 8, 
        "ToPort" : -1, 
        "CidrIp" : "0.0.0.0/0" 
        }
       ],
       "Tags": [
        {
         "Key": "Application",
         "Value": {
          "Ref": "application"
         }
        },
        {
         "Key": "Costcenter",
         "Value": {
          "Ref": "costcenter"
         }
        },
        {
         "Key": "Environment",
         "Value": {
          "Ref": "environment"
         }
        },
        {
         "Key": "Group",
         "Value": {
          "Ref": "group"
         }
        },
        {
         "Key": "Name",
         "Value": {
          "Fn::Join": [
           "",
           [
            "Bigip External Security Group:",
            {
             "Ref": "AWS::StackName"
            }
           ]
          ]
         }
        },
        {
         "Key": "Owner",
         "Value": {
          "Ref": "owner"
         }
        }
       ],
       "VpcId": {
        "Fn::ImportValue" : {"Fn::Sub": "${pVpcStackName}-VdssVpcId" }
       }
      },
      "Type": "AWS::EC2::SecurityGroup"
     },
     "bigipInternalSecurityGroup": {
      "Properties": {
       "GroupDescription": "Allow All from Intra-VPC only",
       "SecurityGroupIngress": [
        {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
       ],
       "Tags": [
        {
         "Key": "Application",
         "Value": {
          "Ref": "application"
         }
        },
        {
         "Key": "Costcenter",
         "Value": {
          "Ref": "costcenter"
         }
        },
        {
         "Key": "Environment",
         "Value": {
          "Ref": "environment"
         }
        },
        {
         "Key": "Group",
         "Value": {
          "Ref": "group"
         }
        },
        {
         "Key": "Name",
         "Value": {
          "Fn::Join": [
           "",
           [
            "Bigip Internal Security Group:",
            {
             "Ref": "AWS::StackName"
            }
           ]
          ]
         }
        },
        {
         "Key": "Owner",
         "Value": {
          "Ref": "owner"
         }
        }
       ],
       "VpcId": {
        "Fn::ImportValue" : {"Fn::Sub": "${pVpcStackName}-VdssVpcId" }
       }
      },
      "Type": "AWS::EC2::SecurityGroup"
     },
     "bigipManagementSecurityGroup": {
      "Properties": {
       "GroupDescription": "BIG-IP management interface policy",
       "SecurityGroupIngress": [
        {
         "CidrIp": {
          "Ref": "restrictedSrcAddress"
         },
         "FromPort": "22",
         "IpProtocol": "tcp",
         "ToPort": "22"
        },
        {
         "CidrIp": {
          "Ref": "restrictedSrcAddress"
         },
         "FromPort": "443",
         "IpProtocol": "tcp",
         "ToPort": "443"
        },
        { 
        "IpProtocol" : "icmp", 
        "FromPort" : 8, 
        "ToPort" : -1, 
        "CidrIp" : "0.0.0.0/0" 
        }
       ],
       "Tags": [
        {
         "Key": "Application",
         "Value": {
          "Ref": "application"
         }
        },
        {
         "Key": "Costcenter",
         "Value": {
          "Ref": "costcenter"
         }
        },
        {
         "Key": "Environment",
         "Value": {
          "Ref": "environment"
         }
        },
        {
         "Key": "Group",
         "Value": {
          "Ref": "group"
         }
        },
        {
         "Key": "Name",
         "Value": {
          "Fn::Join": [
           "",
           [
            "Bigip Management Security Group:",
            {
             "Ref": "AWS::StackName"
            }
           ]
          ]
         }
        },
        {
         "Key": "Owner",
         "Value": {
          "Ref": "owner"
         }
        }
       ],
       "VpcId": {
        "Fn::ImportValue" : {"Fn::Sub": "${pVpcStackName}-VdssVpcId" }
       }
      },
      "Type": "AWS::EC2::SecurityGroup"
     },
     "bigipSecurityGroupIngressConfigSync": {
      "Properties": {
       "FromPort": "4353",
       "GroupId": {
        "Ref": "bigipInternalSecurityGroup"
       },
       "IpProtocol": "tcp",
       "SourceSecurityGroupId": {
        "Ref": "bigipInternalSecurityGroup"
       },
       "ToPort": "4353"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
     },
     "bigipSecurityGroupIngressHa": {
      "Properties": {
       "FromPort": "1026",
       "GroupId": {
        "Ref": "bigipInternalSecurityGroup"
       },
       "IpProtocol": "udp",
       "SourceSecurityGroupId": {
        "Ref": "bigipInternalSecurityGroup"
       },
       "ToPort": "1026"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
     },
     "bigipSecurityGroupIngressManagmentSame": {
      "Properties": {
       "FromPort": "443",
       "GroupId": {
        "Ref": "bigipManagementSecurityGroup"
       },
       "IpProtocol": "tcp",
       "SourceSecurityGroupId": {
        "Ref": "bigipManagementSecurityGroup"
       },
       "ToPort": "443"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
     },
     "bigipServiceDiscoveryAccessRole": {
      "Properties": {
       "AssumeRolePolicyDocument": {
        "Statement": [
         {
          "Action": [
           "sts:AssumeRole"
          ],
          "Effect": "Allow",
          "Principal": {
           "Service": [
            "ec2.amazonaws.com"
           ]
          }
         }
        ],
        "Version": "2012-10-17"
       },
       "Path": "/",
       "Policies": [
        {
         "PolicyDocument": {
          "Statement": [
           {
            "Action": [
             "ec2:DescribeInstances",
             "ec2:DescribeInstanceStatus",
             "ec2:DescribeAddresses",
             "ec2:AssociateAddress",
             "ec2:DisassociateAddress",
             "ec2:DescribeNetworkInterfaces",
             "ec2:DescribeNetworkInterfaceAttribute",
             "ec2:DescribeRouteTables",
             "ec2:ReplaceRoute",
             "ec2:assignprivateipaddresses",
             "sts:AssumeRole"
            ],
            "Effect": "Allow",
            "Resource": [
             "*"
            ]
           },
           {
            "Action": [
             "s3:ListBucket"
            ],
            "Effect": "Allow",
            "Resource": {
             "Fn::Join": [
              "",
              [
               "arn:*:s3:::",
               {
                "Ref": "S3Bucket"
               }
              ]
             ]
            }
           },
           {
            "Action": [
             "s3:PutObject",
             "s3:GetObject",
             "s3:DeleteObject"
            ],
            "Effect": "Allow",
            "Resource": {
             "Fn::Join": [
              "",
              [
               "arn:*:s3:::",
               {
                "Ref": "S3Bucket"
               },
               "/*"
              ]
             ]
            }
           }
          ],
          "Version": "2012-10-17"
         },
         "PolicyName": "BigipServiceDiscoveryPolicy"
        }
       ]
      },
      "Type": "AWS::IAM::Role"
     },
     "bigipServiceDiscoveryProfile": {
      "Properties": {
       "Path": "/",
       "Roles": [
        {
         "Ref": "bigipServiceDiscoveryAccessRole"
        }
       ]
      },
      "Type": "AWS::IAM::InstanceProfile"
     }
    }
}